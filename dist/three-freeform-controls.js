import{Mesh as t,ConeGeometry as i,MeshBasicMaterial as e,LineLoop as n,Vector3 as s,Group as a,BufferGeometry as o,Float32BufferAttribute as h,OctahedronBufferGeometry as r,DoubleSide as l,PlaneGeometry as c,Quaternion as d,MathUtils as p,Raycaster as u,Vector2 as v,Plane as m,PlaneHelper as P,Matrix4 as g,Object3D as b}from"three";var w;!function(t){t[t.ACTIVE=.75]="ACTIVE",t[t.INACTIVE=.3]="INACTIVE"}(w||(w={}));class f extends t{constructor(t){super(),this.geometry=new i(.3,.75,32),this.material=new e({color:t,depthTest:!1}),this.material.transparent=!0,this.material.opacity=1}}class y extends n{constructor(t,i){super(),this.geometry=i,this.material=new e({color:t,depthTest:!0}),this.material.transparent=!0,this.material.opacity=1}}var H,A;!function(t){t.XPT="xpt_handle",t.YPT="ypt_handle",t.ZPT="zpt_handle",t.XNT="xnt_handle",t.YNT="ynt_handle",t.ZNT="znt_handle",t.XR="xr_handle",t.YR="yr_handle",t.ZR="zr_handle",t.ER="er_handle",t.PICK="pick_handle",t.PICK_PLANE_XY="pick_plane_xy_handle",t.PICK_PLANE_YZ="pick_plane_yz_handle",t.PICK_PLANE_ZX="pick_plane_zx_handle"}(H||(H={}));class D extends a{}class R extends D{constructor(){super(...arguments),this.up=new s}}class S extends D{constructor(){super(...arguments),this.up=new s}}class T extends D{}class x extends D{constructor(){super(...arguments),this.up=new s}}class E extends R{constructor(t="#f0ff00"){super(),this.parallel=new s(0,1,0),this.getInteractiveObjects=()=>[this.cone],this.setColor=t=>{const i=this.cone.material,e=this.line.material;i.color.set(t),e.color.set(t)},this.cone=new f(t);const i=new o;i.setAttribute("position",new h([0,0,0,0,1,0],3)),this.line=new y(t,i),this.cone.geometry.scale(.3,.75,.3),this.cone.translateY(1),this.add(this.cone),this.add(this.line)}}class j extends t{constructor(t){super(),this.geometry=new r(.1,0),this.material=new e({color:t,depthTest:!1,transparent:!0,side:l})}}class L extends S{constructor(t="#f0ff00",i=1){super(),this.getInteractiveObjects=()=>[this.handlebar],this.setColor=t=>{const i=this.ring.material,e=this.handlebar.material;i.color.set(t),e.color.set(t)};const e=new o,n=2*Math.PI/64,s=[];for(let t=1;t<65;t++)s.push(i*Math.cos(t*n),i*Math.sin(t*n),0);e.setAttribute("position",new h(s,3)),this.ring=new y(t,e),this.handlebar=new j(t),this.handlebar.position.y=i,this.add(this.ring),this.add(this.handlebar)}}class O extends T{constructor(){super(),this.getInteractiveObjects=()=>[this.octahedron],this.setColor=t=>{this.octahedron.material.color.set(t)},this.octahedron=new j("white"),this.add(this.octahedron)}}class C extends t{constructor(t="#f0ff00",i=.75,n=.75){super(),this.geometry=new c(i,n,32),this.material=new e({color:t,depthTest:!1,side:l,transparent:!0}),this.material.opacity=w.INACTIVE}}class I extends x{constructor(t="#f0ff00",i=.75,e=.75){super(),this.getInteractiveObjects=()=>[this.plane],this.setColor=t=>{const i=this.plane.material,e=this.boundary.material;i.color.set(t),e.color.set(t)};const n=new o,s=new o,a=new o,r=i/2,l=e/2;n.setAttribute("position",new h([r,l,0,r,-l,0,-r,-l,0,-r,l,0],3)),s.setAttribute("position",new h([0,l,0,0,-l,0],3)),a.setAttribute("position",new h([-r,0,0,r,0,0],3)),this.boundary=new y(t,n),this.crossX=new y("black",s),this.crossY=new y("black",a),this.plane=new C(t,i,e),this.add(this.plane),this.add(this.boundary),this.add(this.crossX),this.add(this.crossY)}}class _ extends L{constructor(t="#f0ff00",i=1){super(t,i),this.camera=null,this.controlsWorldOrientation=new d,this._temp1=new s,this._temp2=new s,this._temp3=new d,this.worldPosition=new s}updateMatrixWorld(t){var i;null!==this.camera&&(null===(i=this.parent)||void 0===i||i.matrixWorld.decompose(this._temp1,this.controlsWorldOrientation,this._temp2),this.matrixWorld.decompose(this.worldPosition,this._temp3,this._temp2),this.camera.getWorldQuaternion(this.quaternion).premultiply(this.controlsWorldOrientation.invert()),this.camera.getWorldPosition(this.up).sub(this.worldPosition)),super.updateMatrixWorld(t)}}!function(t){t.FIXED="fixed",t.INHERIT="inherit"}(A||(A={}));class X extends a{constructor(t,i,e){var n,a,o,h,r,l,c,u,v,m,P,g,b,w,f,y,D,j,C,X,Y,N,W,k,Z,M;if(super(),this.object=t,this.camera=i,this.handleTargetQuaternion=new d,this.objectWorldPosition=new s,this.objectTargetPosition=new s,this.objectTargetQuaternion=new d,this.objectParentWorldPosition=new s,this.objectParentWorldQuaternion=new d,this.objectParentWorldScale=new s,this.deltaPosition=new s,this.normalizedHandleParallelVectorCache=new s,this.touch1=new s,this.touch2=new s,this.boundingSphereRadius=0,this.dragStartPoint=new s,this.dragIncrementalStartPoint=new s,this.handles=new Set,this.isBeingDraggedTranslation=!1,this.isBeingDraggedRotation=!1,this.dampingFactor=.8,this.initialSelfQuaternion=new d,this.minTranslationCache=new s,this.maxTranslationCache=new s,this.translationLimit=!1,this.translationAnchor=null,this.setupDefaultPickPlane=()=>{this.pickPlaneXY.name=H.PICK_PLANE_XY,this.pickPlaneYZ.name=H.PICK_PLANE_YZ,this.pickPlaneZX.name=H.PICK_PLANE_ZX,this.pickPlaneYZ.up=new s(1,0,0),this.pickPlaneZX.up=new s(0,1,0),this.pickPlaneXY.up=new s(0,0,1),this.pickPlaneYZ.rotateY(Math.PI/2),this.pickPlaneZX.rotateX(Math.PI/2),this.setupHandle(this.pickPlaneXY),this.setupHandle(this.pickPlaneYZ),this.setupHandle(this.pickPlaneZX)},this.setupHandle=t=>{this.handles.add(t),this.add(t)},this.setupDefaultPick=()=>{this.pick.name=H.PICK,this.setupHandle(this.pick)},this.setupDefaultEyeRotation=()=>{this.rotationEye.name=H.ER,this.rotationEye.camera=this.camera,this.setupHandle(this.rotationEye)},this.setupDefaultTranslation=()=>{this.translationXP.name=H.XPT,this.translationYP.name=H.YPT,this.translationZP.name=H.ZPT,this.translationXN.name=H.XNT,this.translationYN.name=H.YNT,this.translationZN.name=H.ZNT,this.translationXP.translateX(this.boundingSphereRadius*this.translationDistanceScale),this.translationYP.translateY(this.boundingSphereRadius*this.translationDistanceScale),this.translationZP.translateZ(this.boundingSphereRadius*this.translationDistanceScale),this.translationXN.translateX(-this.boundingSphereRadius*this.translationDistanceScale),this.translationYN.translateY(-this.boundingSphereRadius*this.translationDistanceScale),this.translationZN.translateZ(-this.boundingSphereRadius*this.translationDistanceScale),this.translationXP.rotateZ(-Math.PI/2),this.translationZP.rotateX(Math.PI/2),this.translationXN.rotateZ(Math.PI/2),this.translationYN.rotateX(Math.PI),this.translationZN.rotateX(-Math.PI/2),this.translationXP.up=new s(0,1,0),this.translationYP.up=new s(0,0,1),this.translationZP.up=new s(0,1,0),this.translationXN.up=new s(0,-1,0),this.translationYN.up=new s(0,0,-1),this.translationZN.up=new s(0,-1,0),this.translationXP.parallel=new s(1,0,0),this.translationYP.parallel=new s(0,1,0),this.translationZP.parallel=new s(0,0,1),this.translationXN.parallel=new s(-1,0,0),this.translationYN.parallel=new s(0,-1,0),this.translationZN.parallel=new s(0,0,-1),this.setupHandle(this.translationXP),this.setupHandle(this.translationYP),this.setupHandle(this.translationZP),this.setupHandle(this.translationXN),this.setupHandle(this.translationYN),this.setupHandle(this.translationZN)},this.setupDefaultRotation=()=>{this.rotationX.name=H.XR,this.rotationY.name=H.YR,this.rotationZ.name=H.ZR,this.rotationX.up=new s(1,0,0),this.rotationY.up=new s(0,1,0),this.rotationZ.up=new s(0,0,1),this.rotationY.rotateX(Math.PI/2),this.rotationX.rotateY(Math.PI/2),this.rotationX.rotateZ(Math.PI),this.setupHandle(this.rotationX),this.setupHandle(this.rotationY),this.setupHandle(this.rotationZ)},this.computeObjectBounds=()=>{var t;if(this.useComputedBounds){if("Mesh"===this.object.type){const i=this.object.geometry;i.computeBoundingSphere();const{boundingSphere:e}=i,n=null!==(t=null==e?void 0:e.radius)&&void 0!==t?t:0;return void(this.boundingSphereRadius=n/2+this.separation)}console.warn(`Bounds can only be computed for object of type THREE.Mesh,\n          received object with type: ${this.object.type}. Falling back to using\n          default separation.\n        `)}this.boundingSphereRadius=this.separation},this.setTranslationLimit=t=>{this.translationLimit=t,this.translationAnchor=t?this.position.clone():null},this.processDragStart=t=>{const{point:i,handle:e}=t;this.dragStartPoint.copy(i),this.dragIncrementalStartPoint.copy(i),this.isBeingDraggedTranslation=e instanceof R||e instanceof T||e instanceof x,this.isBeingDraggedRotation=e instanceof S},this.processDragEnd=t=>{const{handle:i}=t,{x:e,y:n,z:s}=this.snapTranslation,a=[e,n,s];if(i instanceof R||i instanceof x||i instanceof T){const t=this.object.position.toArray(),i=t.map(Math.floor),e=t.map(Math.ceil),n=t.map(((t,n)=>e[n]-t>=t-i[n])),s=t.map(((t,s)=>a[s]?n[s]?i[s]:e[s]:t));this.object.position.fromArray(s)}this.isBeingDraggedTranslation=!1,this.isBeingDraggedRotation=!1},this.setDampingFactor=(t=0)=>this.dampingFactor=p.clamp(t,0,1),this.processDrag=t=>{const{point:i,handle:e,dragRatio:n=1}=t,s=Math.exp(-this.dampingFactor*Math.abs(Math.pow(n,3)));if(e instanceof R){this.deltaPosition.copy(i).sub(this.dragIncrementalStartPoint),this.normalizedHandleParallelVectorCache.copy(e.parallel.normalize()).applyQuaternion(this.quaternion);const t=this.deltaPosition.dot(this.normalizedHandleParallelVectorCache);this.deltaPosition.copy(this.normalizedHandleParallelVectorCache).multiplyScalar(this.isDampingEnabled?s*t:t),this.position.copy(this.getLimitedTranslation(this.deltaPosition))}else e instanceof T||e instanceof x?(this.deltaPosition.copy(i).sub(this.dragIncrementalStartPoint).multiplyScalar(this.isDampingEnabled?s:1),this.position.copy(this.getLimitedTranslation(this.deltaPosition))):(this.touch1.copy(this.dragIncrementalStartPoint).sub(this.objectWorldPosition).normalize(),this.touch2.copy(i).sub(this.objectWorldPosition).normalize(),this.handleTargetQuaternion.setFromUnitVectors(this.touch1,this.touch2),this.mode===A.FIXED&&this.detachHandleUpdateQuaternionAttach(e,this.handleTargetQuaternion));this.objectTargetQuaternion.premultiply(this.handleTargetQuaternion),this.dragIncrementalStartPoint.copy(i)},this.getLimitedTranslation=t=>{const i=t.add(this.position);if(!this.translationAnchor||!this.translationLimit)return i;const{x:e,y:n,z:s}=this.translationLimit,{x:a,y:o,z:h}=this.translationAnchor,{x:r,y:l,z:c}=i;return this.minTranslationCache.set(e?a+e[0]:r,n?o+n[0]:l,s?h+s[0]:c),this.maxTranslationCache.set(e?a+e[1]:r,n?o+n[1]:l,s?h+s[1]:c),i.clamp(this.minTranslationCache,this.maxTranslationCache)},this.detachObjectUpdatePositionAttach=(t,i)=>{if(null!==t&&null!==this.parent&&null!==this.parent.parent){const e=this.parent.parent;if("Scene"!==e.type)throw new Error("freeform controls must be attached to the scene");e.attach(i),i.position.copy(this.objectTargetPosition),t.attach(i)}},this.detachHandleUpdateQuaternionAttach=(t,i)=>{if(null!==this.parent&&this.parent.parent){const e=this.parent.parent;if("Scene"!==e.type)throw new Error("freeform controls must be attached to the scene");e.attach(t),t.applyQuaternion(i),this.attach(t)}},this.showByNames=(t,i=!0)=>{const e={};this.handles.forEach((t=>{e[t.name]=t})),t.map((t=>{const n=e[t];if(void 0===n)throw new Error(`handle: ${t} not found`);n.visible=i}))},this.showAll=(t=!0)=>{this.handles.forEach((i=>{i.visible=t}))},this.updateMatrixWorld=t=>{this.object.updateMatrixWorld(t),this.object.getWorldPosition(this.objectWorldPosition);const i=this.object.parent;null!==i&&i.matrixWorld.decompose(this.objectParentWorldPosition,this.objectParentWorldQuaternion,this.objectParentWorldScale),this.objectParentWorldQuaternion.invert(),this.objectTargetPosition.copy(this.position),this.objectTargetQuaternion.premultiply(this.objectParentWorldQuaternion),this.isBeingDraggedTranslation?this.detachObjectUpdatePositionAttach(i,this.object):this.isBeingDraggedRotation?(this.object.quaternion.copy(this.objectTargetQuaternion),this.detachObjectUpdatePositionAttach(i,this.object)):this.position.copy(this.objectWorldPosition),this.object.getWorldQuaternion(this.objectTargetQuaternion),this.mode!==A.INHERIT||this.isBeingDraggedTranslation||this.quaternion.copy(this.initialSelfQuaternion).premultiply(this.objectTargetQuaternion),super.updateMatrixWorld(t)},this.options=e||{},this.mode=null!==(a=null===(n=this.options)||void 0===n?void 0:n.mode)&&void 0!==a?a:A.FIXED,this.hideOtherHandlesOnDrag=null===(h=null===(o=this.options)||void 0===o?void 0:o.hideOtherHandlesOnDrag)||void 0===h||h,this.hideOtherControlsInstancesOnDrag=null===(l=null===(r=this.options)||void 0===r?void 0:r.hideOtherControlsInstancesOnDrag)||void 0===l||l,this.showHelperPlane=null!==(u=null===(c=this.options)||void 0===c?void 0:c.showHelperPlane)&&void 0!==u&&u,this.highlightAxis=null===(m=null===(v=this.options)||void 0===v?void 0:v.highlightAxis)||void 0===m||m,this.useComputedBounds=null!==(g=null===(P=this.options)||void 0===P?void 0:P.useComputedBounds)&&void 0!==g&&g,this.snapTranslation=null!==(w=null===(b=this.options)||void 0===b?void 0:b.snapTranslation)&&void 0!==w?w:{x:!1,y:!1,z:!1},this.separation=null!==(y=null===(f=this.options)||void 0===f?void 0:f.separation)&&void 0!==y?y:1,this.isDampingEnabled=null===(j=null===(D=this.options)||void 0===D?void 0:D.isDampingEnabled)||void 0===j||j,this.rotationRadiusScale=null!==(X=null===(C=this.options)||void 0===C?void 0:C.rotationRadiusScale)&&void 0!==X?X:1,this.eyeRotationRadiusScale=null!==(N=null===(Y=this.options)||void 0===Y?void 0:Y.eyeRotationRadiusScale)&&void 0!==N?N:1.25,this.pickPlaneSizeScale=null!==(k=null===(W=this.options)||void 0===W?void 0:W.pickPlaneSizeScale)&&void 0!==k?k:.75,this.translationDistanceScale=null!==(M=null===(Z=this.options)||void 0===Z?void 0:Z.translationDistanceScale)&&void 0!==M?M:1,void 0!==this.options.orientation){const{x:t,y:i,z:e,w:n}=this.options.orientation;this.initialSelfQuaternion.set(t,i,e,n).normalize(),this.quaternion.copy(this.initialSelfQuaternion)}this.computeObjectBounds(),this.pick=new O,this.pickPlaneXY=new I("yellow",this.boundingSphereRadius*this.pickPlaneSizeScale,this.boundingSphereRadius*this.pickPlaneSizeScale),this.pickPlaneYZ=new I("cyan",this.boundingSphereRadius*this.pickPlaneSizeScale,this.boundingSphereRadius*this.pickPlaneSizeScale),this.pickPlaneZX=new I("pink",this.boundingSphereRadius*this.pickPlaneSizeScale,this.boundingSphereRadius*this.pickPlaneSizeScale),this.translationXP=new E("red"),this.translationYP=new E("green"),this.translationZP=new E("blue"),this.translationXN=new E("red"),this.translationYN=new E("green"),this.translationZN=new E("blue"),this.rotationX=new L("red",this.boundingSphereRadius*this.rotationRadiusScale),this.rotationY=new L("green",this.boundingSphereRadius*this.rotationRadiusScale),this.rotationZ=new L("blue",this.boundingSphereRadius*this.rotationRadiusScale),this.rotationEye=new _("yellow",this.boundingSphereRadius*this.eyeRotationRadiusScale),this.setupDefaultTranslation(),this.setupDefaultRotation(),this.setupDefaultEyeRotation(),this.setupDefaultPickPlane(),this.setupDefaultPick()}getInteractiveObjects(){const t=[];return this.handles.forEach((i=>{i.visible&&t.push(...i.getInteractiveObjects())})),t}}var Y,N,W=(Y=function(t){(t.exports=function(){this.events={}}).prototype={emit:function(t){var i=[].slice.call(arguments,1);[].slice.call(this.events[t]||[]).filter((function(t){t.apply(null,i)}))},on:function(t,i){return(this.events[t]=this.events[t]||[]).push(i),function(){this.events[t]=this.events[t].filter((function(t){return t!==i}))}.bind(this)}}},Y(N={exports:{}},N.exports),N.exports);var k=function(t){t.events={}};const Z=new W,M=t=>{let i=0,e=0;if(t instanceof MouseEvent)i=t.clientX,e=t.clientY;else if(t instanceof TouchEvent){if(0===t.touches.length)return null;i=t.touches[0].clientX,e=t.touches[0].clientY}return{clientX:i,clientY:e}},Q=(t,i,e,n=!1)=>{i.forEach((i=>{t.addEventListener(i,e,n)}))},G=(t,i,e,n=!1)=>{i.forEach((i=>{t.removeEventListener(i,e,n)}))};var z,F;!function(t){t.DRAG_START="DRAG_START",t.DRAG="DRAG",t.DRAG_STOP="DRAG_STOP"}(z||(z={}));class B extends u{constructor(t,i,e){super(),this.camera=t,this.domElement=i,this.controls=e,this.mouse=new v,this.cameraPosition=new s,this.activeHandle=null,this.activePlane=null,this.point=new s,this.normal=new s,this.visibleHandles=[],this.visibleControls=[],this.helperPlane=null,this.controlsWorldQuaternion=new d,this.clientDiagonalLength=1,this.previousScreenPoint=new v,this.currentScreenPoint=new v,this.isActivePlaneFlipped=!1,this.createAxisLine=()=>{const t=new o;return t.setAttribute("position",new h([0,0,-100,0,0,100],3)),new y("white",t)},this.pointerDownListener=t=>{var i;const e=M(t);if(!e)return;const{clientX:n,clientY:a}=e;this.setRayDirection(n,a),this.clientDiagonalLength=Math.sqrt(Math.pow(t.target.clientWidth,2)+Math.pow(t.target.clientHeight,2)),this.previousScreenPoint.set(n,a);const o=[];if(Object.values(this.controls).map((t=>{o.push(...t.getInteractiveObjects())})),this.activeHandle=this.resolveHandleGroup(this.intersectObjects(o,!0)[0]),null===(i=this.activeHandle)||void 0===i?void 0:i.parent){const t=this.activeHandle.parent;t.hideOtherControlsInstancesOnDrag&&(Object.values(this.controls).forEach((t=>{t.visible&&this.visibleControls.push(t),t.visible=!1})),t.visible=!0),t.hideOtherHandlesOnDrag&&(t.children.map((t=>{t.visible&&this.visibleHandles.push(t),t.visible=!1})),this.activeHandle.visible=!0),this.activeHandle instanceof I&&this.setPickPlaneOpacity(w.ACTIVE),this.activePlane=new m;const i=this.getEyePlaneNormal(this.activeHandle);if(t.getWorldQuaternion(this.controlsWorldQuaternion),this.normal.copy(this.activeHandle instanceof T?i:this.activeHandle.up),this.activeHandle instanceof _||this.activeHandle instanceof T||this.normal.applyQuaternion(this.controlsWorldQuaternion),this.activeHandle instanceof R){const t=i.dot(this.normal)/i.length();this.isActivePlaneFlipped=Math.abs(t)<.25,this.isActivePlaneFlipped&&(this.isActivePlaneFlipped=!0,this.normal.applyAxisAngle(this.activeHandle.parallel,Math.PI/2))}this.activeHandle instanceof R?this.activePlane.setFromNormalAndCoplanarPoint(this.normal,this.activeHandle.position):this.activePlane.setFromNormalAndCoplanarPoint(this.normal,t.position);const e=new s;this.activeHandle instanceof T?this.activeHandle.getWorldPosition(e):this.ray.intersectPlane(this.activePlane,e);const n=t.parent;if(!t.showHelperPlane||!(this.activeHandle instanceof R||this.activeHandle instanceof S)||this.activeHandle instanceof _||(this.helperPlane=new P(this.activePlane,1),n.add(this.helperPlane)),t.highlightAxis&&(this.activeHandle instanceof R||this.activeHandle instanceof S)&&!(this.activeHandle instanceof _)){this.activeHandle.getWorldPosition(this.highlightAxisLine.position);const t=this.highlightAxisLine.position.clone();this.activeHandle instanceof R?t.add(this.activeHandle.parallel):t.add(this.activeHandle.up),this.highlightAxisLine.lookAt(t),n.add(this.highlightAxisLine)}G(this.domElement,["pointerdown","touchstart"],this.pointerDownListener,{capture:!0}),Z.emit(z.DRAG_START,{point:e,handle:this.activeHandle}),Q(this.domElement,["pointermove","touchmove"],this.pointerMoveListener,{passive:!1,capture:!0})}else this.activePlane=null},this.getEyePlaneNormal=t=>(this.cameraPosition.copy(this.camera.position),this.cameraPosition.sub(t.position)),this.setRayDirection=(t,i)=>{const e=this.domElement.getBoundingClientRect(),{clientHeight:n,clientWidth:s}=this.domElement;this.mouse.x=(t-e.left)/s*2-1,this.mouse.y=-(i-e.top)/n*2+1,this.setFromCamera(this.mouse,this.camera)},this.pointerMoveListener=t=>{if(null===this.activeHandle||null===this.activePlane)return;const i=M(t);if(!i)return;const{clientX:e,clientY:n}=i;this.setRayDirection(e,n),this.ray.intersectPlane(this.activePlane,this.point),this.currentScreenPoint.set(e,n);const s=this.currentScreenPoint.distanceTo(this.previousScreenPoint)/(this.clientDiagonalLength||1);Z.emit(z.DRAG,{point:this.point,handle:this.activeHandle,dragRatio:s}),this.previousScreenPoint.set(e,n)},this.pointerUpListener=()=>{var t,i,e,n;G(this.domElement,["pointermove","touchmove"],this.pointerMoveListener,{capture:!0}),Q(this.domElement,["pointerdown","touchstart"],this.pointerDownListener,{passive:!1,capture:!0}),Z.emit(z.DRAG_STOP,{point:this.point,handle:this.activeHandle}),(null===(t=this.activeHandle)||void 0===t?void 0:t.parent)&&this.activeHandle.parent.hideOtherControlsInstancesOnDrag&&(this.visibleControls.forEach((t=>{t.visible=!0})),this.visibleControls=[]),(null===(i=this.activeHandle)||void 0===i?void 0:i.parent)&&this.activeHandle.parent.hideOtherHandlesOnDrag&&(this.visibleHandles.forEach((t=>{t.visible=!0})),this.visibleHandles=[]),this.activeHandle instanceof I&&this.setPickPlaneOpacity(w.INACTIVE);const s=null===(n=null===(e=this.activeHandle)||void 0===e?void 0:e.parent)||void 0===n?void 0:n.parent;s&&(this.helperPlane&&s.remove(this.helperPlane),s.remove(this.highlightAxisLine)),this.activeHandle=null,this.activePlane=null},this.resolveHandleGroup=t=>void 0===t?null:t.object.parent,this.destroy=()=>{this.activePlane=null,this.activeHandle=null,G(this.domElement,["pointerdown","touchstart"],this.pointerDownListener,{capture:!0}),G(this.domElement,["pointermove","touchmove"],this.pointerMoveListener,{capture:!0}),G(this.domElement,["pointerup","touchend"],this.pointerUpListener,{capture:!0})},this.highlightAxisLine=this.createAxisLine(),Q(this.domElement,["pointerdown","touchstart"],this.pointerDownListener,{passive:!1,capture:!0}),Q(this.domElement,["pointerup","touchend"],this.pointerUpListener,{passive:!1,capture:!0})}setPickPlaneOpacity(t){if(!(this.activeHandle instanceof I))return;const i=this.activeHandle.plane.material;Array.isArray(i)?i.map((i=>{i.opacity=t,i.needsUpdate=!0})):(i.opacity=t,i.needsUpdate=!0)}}!function(t){t.DRAG_START="DRAG_START",t.DRAG="DRAG",t.DRAG_STOP="DRAG_STOP"}(F||(F={}));const V=new g;class U extends u{constructor(t,i){super(),this.xrControllers=t,this.controls=i,this.activeHandle=null,this.activePlane=null,this.point=new s,this.normal=new s,this.visibleHandles=[],this.visibleControls=[],this.helperPlane=null,this.controlsWorldQuaternion=new d,this.clientDiagonalLength=1,this.createAxisLine=()=>{const t=new o;return t.setAttribute("position",new h([0,0,-100,0,0,100],3)),new y("white",t)},this.selectStartListener=t=>{var i;const e=t.target;V.identity().extractRotation(e.matrixWorld),this.ray.origin.setFromMatrixPosition(e.matrixWorld),this.ray.direction.set(0,0,-1).applyMatrix4(V),e.userData.dragging=!0,e.userData.previousPosition=(new s).copy(e.position),e.userData.previousQuaternion=(new d).copy(e.quaternion);const n=[];if(Object.values(this.controls).map((t=>{n.push(...t.getInteractiveObjects())})),this.activeHandle=this.resolveHandleGroup(this.intersectObjects(n,!0)[0]),null===(i=this.activeHandle)||void 0===i?void 0:i.parent){const t=this.activeHandle.parent;t.hideOtherControlsInstancesOnDrag&&(Object.values(this.controls).forEach((t=>{t.visible&&this.visibleControls.push(t),t.visible=!1})),t.visible=!0),t.hideOtherHandlesOnDrag&&(t.children.map((t=>{t.visible&&this.visibleHandles.push(t),t.visible=!1})),this.activeHandle.visible=!0),this.activeHandle instanceof I&&this.setPickPlaneOpacity(w.ACTIVE),this.activePlane=new m,t.getWorldQuaternion(this.controlsWorldQuaternion),this.normal.copy(this.activeHandle.up),this.activeHandle instanceof _||this.activeHandle instanceof T||this.normal.applyQuaternion(this.controlsWorldQuaternion),this.activeHandle instanceof R?this.activePlane.setFromNormalAndCoplanarPoint(this.normal,this.activeHandle.position):this.activePlane.setFromNormalAndCoplanarPoint(this.normal,t.position);const i=new s;this.activeHandle instanceof T?this.activeHandle.getWorldPosition(i):this.ray.intersectPlane(this.activePlane,i);const n=t.parent;if(!t.showHelperPlane||!(this.activeHandle instanceof R||this.activeHandle instanceof S)||this.activeHandle instanceof _||(this.helperPlane=new P(this.activePlane,1),n.add(this.helperPlane)),t.highlightAxis&&(this.activeHandle instanceof R||this.activeHandle instanceof S)&&!(this.activeHandle instanceof _)){this.activeHandle.getWorldPosition(this.highlightAxisLine.position);const t=this.highlightAxisLine.position.clone();this.activeHandle instanceof R?t.add(this.activeHandle.parallel):t.add(this.activeHandle.up),this.highlightAxisLine.lookAt(t),n.add(this.highlightAxisLine)}Z.emit(F.DRAG_START,{point:i,handle:this.activeHandle}),e.userData.intersectionPoint=i}else this.activePlane=null},this.selectMoveListener=t=>{if(null===this.activeHandle||null===this.activePlane)return;V.identity().extractRotation(t.matrixWorld),this.ray.origin.setFromMatrixPosition(t.matrixWorld),this.ray.direction.set(0,0,-1).applyMatrix4(V),this.ray.intersectPlane(this.activePlane,this.point);const i=t.userData.intersectionPoint.distanceTo(this.point)/(this.clientDiagonalLength||1);Z.emit(F.DRAG,{point:this.point,handle:this.activeHandle,dragRatio:i}),t.userData.previousPosition.copy(t.position),t.userData.previousQuaternion.copy(t.quaternion),t.userData.intersectionPoint.copy(this.point)},this.selectEndListener=t=>{var i,e,n,s;t.target.userData.dragging=!1,Z.emit(F.DRAG_STOP,{point:this.point,handle:this.activeHandle}),(null===(i=this.activeHandle)||void 0===i?void 0:i.parent)&&this.activeHandle.parent.hideOtherControlsInstancesOnDrag&&(this.visibleControls.forEach((t=>{t.visible=!0})),this.visibleControls=[]),(null===(e=this.activeHandle)||void 0===e?void 0:e.parent)&&this.activeHandle.parent.hideOtherHandlesOnDrag&&(this.visibleHandles.forEach((t=>{t.visible=!0})),this.visibleHandles=[]),this.activeHandle instanceof I&&this.setPickPlaneOpacity(w.INACTIVE);const a=null===(s=null===(n=this.activeHandle)||void 0===n?void 0:n.parent)||void 0===s?void 0:s.parent;a&&(this.helperPlane&&a.remove(this.helperPlane),a.remove(this.highlightAxisLine)),this.activeHandle=null,this.activePlane=null},this.resolveHandleGroup=t=>void 0===t?null:t.object.parent,this.update=()=>{this.xrControllers.forEach((t=>{t.userData.dragging&&this.selectMoveListener(t)}))},this.destroy=()=>{this.activePlane=null,this.activeHandle=null,this.xrControllers.forEach((t=>{G(t,["selectstart"],this.selectStartListener),G(t,["selectend"],this.selectEndListener)}))},this.highlightAxisLine=this.createAxisLine(),this.xrControllers=t,this.xrControllers.forEach((t=>{Q(t,["selectstart"],this.selectStartListener),Q(t,["selectend"],this.selectEndListener)}))}setPickPlaneOpacity(t){if(!(this.activeHandle instanceof I))return;const i=this.activeHandle.plane.material;Array.isArray(i)?i.map((i=>{i.opacity=t,i.needsUpdate=!0})):(i.opacity=t,i.needsUpdate=!0)}}class q extends b{constructor(i,e,n=[]){super(),this.camera=i,this.domElement=e,this.xrControllers=n,this.objects={},this.controls={},this.eventListeners={[z.DRAG_START]:[],[z.DRAG]:[],[z.DRAG_STOP]:[]},this.xrRaycaster=null,this.listenToEvents=()=>{Z.on(z.DRAG_START,(({point:t,handle:i})=>{if(null===i)return;const e=i.parent;null!==e&&(e.processDragStart({point:t,handle:i}),this.eventListeners[z.DRAG_START].map((t=>{t(e.object,i.name)})))})),Z.on(z.DRAG,(({point:t,handle:i,dragRatio:e})=>{if(null===i)return;const n=i.parent;null!==n&&(n.processDrag({point:t,handle:i,dragRatio:e}),this.eventListeners[z.DRAG].map((t=>{t(n.object,i.name)})))})),Z.on(z.DRAG_STOP,(({handle:t})=>{if(null===t)return;const i=t.parent;null!==i&&(i.processDragEnd({handle:t}),this.eventListeners[z.DRAG_STOP].map((e=>{e(i.object,t.name)})))}))},this.anchor=(t,i)=>{const e=this.addControls(t,i);return this.objects[t.id]=t,e},this.update=()=>{this.xrRaycaster&&this.xrRaycaster.update()},this.detach=(t,i)=>{if(!Object.prototype.hasOwnProperty.call(this.objects,t.id))throw new Error("object should be attached first");this.remove(i),this.dispose(i),delete this.objects[t.id],delete this.controls[i.id]},this.addControls=(t,i)=>{const e=new X(t,this.camera,i);return this.controls[e.id]=e,this.add(e),e},this.listen=(t,i)=>{this.eventListeners[t].push(i)},this.removeListen=(t,i)=>{const e=this.eventListeners[t].findIndex((t=>t===i));-1!==e&&this.eventListeners[t].splice(e,1)},this.dispose=i=>{for(i instanceof t&&(i.geometry.dispose(),Array.isArray(i.material)?i.material.map((t=>t.dispose())):i.material.dispose());i.children.length>0;)i.children.map((t=>{this.dispose(t),i.remove(t)}))},this.destroy=()=>{k(Z);const t=this.parent;null!==t&&t.remove(this),this.dispose(this),Object.values(this.controls).map((t=>{this.dispose(t)})),this.rayCaster.destroy(),this.objects={},this.controls={},this.eventListeners={[z.DRAG_START]:[],[z.DRAG]:[],[z.DRAG_STOP]:[]}},this.rayCaster=new B(this.camera,this.domElement,this.controls),n.length&&(this.xrRaycaster=new U(n,this.controls)),this.listenToEvents()}}export{A as ANCHOR_MODE,q as ControlsManager,H as DEFAULT_HANDLE_GROUP_NAME,z as EVENTS,O as Pick,I as PickPlane,x as PickPlaneGroup,L as Rotation,S as RotationGroup,E as Translation,R as TranslationGroup};
//# sourceMappingURL=three-freeform-controls.js.map
