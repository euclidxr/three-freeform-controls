{"version":3,"file":"three-freeform-controls.js","sources":["../src/utils/constants.ts","../src/primitives/cone.ts","../src/primitives/line.ts","../src/controls/handles/index.ts","../src/controls/index.ts","../src/controls/handles/translation.ts","../src/primitives/octahedron.ts","../src/controls/handles/rotation.ts","../src/controls/handles/pick.ts","../src/primitives/plane.ts","../src/controls/handles/pick-plane.ts","../src/controls/handles/rotation-eye.ts","../node_modules/nanoevents/index.js","../node_modules/nanoevents/unbind-all.js","../src/utils/emmiter.ts","../src/utils/helper.ts","../src/utils/raycaster.ts","../src/utils/xr-raycaster.ts","../src/controls-manager.ts"],"sourcesContent":["export const DEFAULT_LINE_HEIGHT = 1;\nexport const DEFAULT_RADIAL_SEGMENTS = 32;\n\nexport const DEFAULT_CONE_HEIGHT = 0.75;\nexport const DEFAULT_CONE_RADIUS = 0.3;\n\nexport const DEFAULT_OCTAHEDRON_RADIUS = 0.1;\n\nexport const DEFAULT_PLANE_WIDTH = 0.75;\nexport const DEFAULT_PLANE_HEIGHT = 0.75;\nexport const DEFAULT_PLANE_SEGMENTS = 32;\n\nexport const DEFAULT_RING_NUM_POINTS = 64;\nexport const DEFAULT_RING_RADIUS = 1;\n\nexport enum PICK_PLANE_OPACITY {\n  ACTIVE = 0.75,\n  INACTIVE = 0.3\n}\n\nexport const DEFAULT_CONTROLS_SEPARATION = 1;\nexport const DEFAULT_ROTATION_RADIUS_SCALE = 1;\nexport const DEFAULT_EYE_ROTATION_SCALE = 1.25;\nexport const DEFAULT_PLANE_SIZE_SCALE = 0.75;\nexport const DEFAULT_TRANSLATION_DISTANCE_SCALE = 1;\n\nexport const DEFAULT_COLOR_ARROW = \"#f0ff00\";\nexport const DEFAULT_COLOR_RING = \"#f0ff00\";\nexport const DEFAULT_COLOR_PLANE = \"#f0ff00\";\nexport const DEFAULT_CONTROLS_OPACITY = 1;\n","import {\n  DEFAULT_CONE_HEIGHT,\n  DEFAULT_CONE_RADIUS,\n  DEFAULT_CONTROLS_OPACITY,\n  DEFAULT_RADIAL_SEGMENTS\n} from \"../utils/constants\";\nimport {ConeGeometry, Mesh, MeshBasicMaterial} from \"three\";\n\nexport default class Cone extends Mesh {\n  constructor(color: string) {\n    super();\n    this.geometry = new ConeGeometry(\n      DEFAULT_CONE_RADIUS,\n      DEFAULT_CONE_HEIGHT,\n      DEFAULT_RADIAL_SEGMENTS\n    );\n    this.material = new MeshBasicMaterial({ color, depthTest: false });\n    this.material.transparent = true;\n    this.material.opacity = DEFAULT_CONTROLS_OPACITY;\n  }\n}\n","import { DEFAULT_CONTROLS_OPACITY } from \"../utils/constants\";\nimport {BufferGeometry, LineLoop, MeshBasicMaterial} from \"three\";\n\nexport default class Line extends LineLoop {\n  constructor(color: string, geometry: BufferGeometry) {\n    super();\n    this.geometry = geometry;\n    this.material = new MeshBasicMaterial({ color, depthTest: true });\n    this.material.transparent = true;\n    this.material.opacity = DEFAULT_CONTROLS_OPACITY;\n  }\n}\n","import {\n Group, Mesh, Vector3\n} from \"three\";\n\n/**\n * Names for default handles\n */\nexport enum DEFAULT_HANDLE_GROUP_NAME {\n  /**\n   * name for default translation handle along the +ve x-axis\n   */\n  XPT = \"xpt_handle\",\n  /**\n   * name for default translation handle along the +ve y-axis\n   */\n  YPT = \"ypt_handle\",\n  /**\n   * name for default translation handle along the +ve z-axis\n   */\n  ZPT = \"zpt_handle\",\n  /**\n   * name for default translation handle along the -ve x-axis\n   */\n  XNT = \"xnt_handle\",\n  /**\n   * name for default translation handle along the -ve y-axis\n   */\n  YNT = \"ynt_handle\",\n  /**\n   * name for default translation handle along the -ve z-axis\n   */\n  ZNT = \"znt_handle\",\n  /**\n   * name for default rotation handle along the x-axis\n   */\n  XR = \"xr_handle\",\n  /**\n   * name for default rotation handle along the y-axis\n   */\n  YR = \"yr_handle\",\n  /**\n   * name for default rotation handle along the z-axis\n   */\n  ZR = \"zr_handle\",\n  /**\n   * name for default rotation handle in the eye-plane\n   */\n  ER = \"er_handle\",\n  /**\n   * name for default translation handle in the eye-plane\n   */\n  PICK = \"pick_handle\",\n  /**\n   * name for default translation handle in the xy plane\n   */\n  PICK_PLANE_XY = \"pick_plane_xy_handle\",\n  /**\n   * name for default translation handle in the yz plane\n   */\n  PICK_PLANE_YZ = \"pick_plane_yz_handle\",\n  /**\n   * name for default translation handle in the zx plane\n   */\n  PICK_PLANE_ZX = \"pick_plane_zx_handle\"\n}\n\n/**\n * Base class for all handles\n * @noInheritDoc\n */\nexport abstract class HandleGroup extends Group {\n  /**\n   * returns an array of all the interactive objects that form a handle;\n   * note that a handle can have non-interactive objects as well.\n   */\n  public abstract getInteractiveObjects(): Mesh[];\n\n  /**\n   * sets the color for the handle; this may involve setting colors for multiple\n   * constituent meshes that form the handle (interactive or non-interactive)\n   * @param color - hex code for the color\n   */\n  public abstract setColor(color: string): void;\n}\n\n/**\n * This class can be extended to create custom translation handles.\n * It requires setting the properties `parallel` and `up`.\n */\nexport abstract class TranslationGroup extends HandleGroup {\n  /**\n   * This is a unit vector that runs parallel to the direction of the translation handle.\n   * For example, in case of [[Controls.translationXP]], it is\n   * `THREE.Vector3(1,0,0)` (along the x-axis).\n   */\n  public abstract parallel: Vector3;\n  /**\n   * This is a unit vector that runs perpendicular to the direction of the translation handles.\n   * For example, in case of [[Controls.translationXP]], it is\n   * `THREE.Vector3(0,1,0)` (along the y-axis).\n   */\n  public up = new Vector3();\n}\n\n/**\n * This class can be extended to create custom rotation handles.\n * It requires setting the property `up`.\n */\nexport abstract class RotationGroup extends HandleGroup {\n  /**\n   * This is a unit vector that runs along the axis of the rotation handles.\n   * For example, in case of [[Controls.rotationX]], it is\n   * `THREE.Vector3(1,0,0)` (along the x-axis).\n   */\n  public up = new Vector3();\n}\n\n/**\n * This class can be extended to create custom pick handle (translates in eye-plane).\n */\nexport abstract class PickGroup extends HandleGroup {}\n\n/**\n * This class can be extended to create custom pick plane handles.\n * It requires setting the property `up`.\n */\nexport abstract class PickPlaneGroup extends HandleGroup {\n  /**\n   * This is a unit vector that is perpendicular to the plane handles.\n   * For example, in case of [[Controls.pickPlaneXY]], it is\n   * `THREE.Vector3(0,0,1)` (along the z-axis).\n   */\n  public up = new Vector3();\n}\n\nexport type IHandle = RotationGroup | TranslationGroup | PickGroup | PickPlaneGroup;\n","import {\n  DEFAULT_CONTROLS_SEPARATION,\n  DEFAULT_EYE_ROTATION_SCALE,\n  DEFAULT_PLANE_SIZE_SCALE,\n  DEFAULT_ROTATION_RADIUS_SCALE,\n  DEFAULT_TRANSLATION_DISTANCE_SCALE\n} from \"../utils/constants\";\nimport Translation from \"./handles/translation\";\nimport Rotation from \"./handles/rotation\";\nimport Pick from \"./handles/pick\";\nimport PickPlane from \"./handles/pick-plane\";\nimport {\n  DEFAULT_HANDLE_GROUP_NAME,\n  IHandle,\n  PickGroup,\n  PickPlaneGroup,\n  RotationGroup,\n  TranslationGroup\n} from \"./handles\";\nimport RotationEye from \"./handles/rotation-eye\";\nimport {Camera, Group, MathUtils, Mesh, Object3D, Quaternion, Vector3} from \"three\";\n\nexport enum ANCHOR_MODE {\n  /**\n   * In this mode the Controls do not inherit the orientation of the object\n   * as it is rotated.\n   */\n  FIXED = \"fixed\",\n  /**\n   * In this mode the Controls rotate as the object is rotated.\n   */\n  INHERIT = \"inherit\"\n}\n\n/**\n * The first number is the unit limit allowed in the -ve direction.\n * The second number is the unit limit allowed in the +ve direction.\n *\n * All calculations are with respect to anchor position which is the object's\n * position when [[setTranslationLimit]] is called.\n * `{ x: [-1, 2], y: false, z: false }` - sets the translation limit to `-1` unit\n * in the -x-direction, `+2` units in the +x-direction, and no limit on the\n * y and z-direction.\n *\n * Setting the limit to `false` disables the limit in all directions.\n */\nexport interface TranslationLimit {\n  x: [number, number] | false;\n  y: [number, number] | false;\n  z: [number, number] | false;\n}\n\nexport interface IControlsOptions {\n  /**\n   * the anchor mode for the controls\n   * @default [[ANCHOR_MODE.FIXED]]\n   */\n  mode?: ANCHOR_MODE;\n  /**\n   * distance between the position of the object and the position of the\n   * handles (in case of translation handles), or the radius (in case of rotation handles),\n   * or the size of the plane (in case of plane handles)\n   * @default 0.5\n   */\n  separation?: number;\n  /**\n   * uses THREE.Mesh.computeBounds to set the separation; if separation\n   * is provided in addition to this option, it is added to the computed bounds\n   * @default false\n   */\n  useComputedBounds?: boolean;\n  /**\n   * the quaternion applied to the whole Controls instance (handles get rotated relatively)\n   * @default undefined\n   */\n  orientation?: {\n    x: number;\n    y: number;\n    z: number;\n    w: number;\n  };\n  /**\n   * hides other handles of a Controls instance when drag starts\n   * @default true\n   */\n  hideOtherHandlesOnDrag?: boolean;\n  /**\n   *  hides all other Controls instances when drag starts\n   *  @default true\n   */\n  hideOtherControlsInstancesOnDrag?: boolean;\n  /**\n   * displays the plane in which the drag interaction takes place\n   * (useful for debugging)\n   * @default false\n   */\n  showHelperPlane?: boolean;\n  /**\n   * enables damping for the controls\n   * @default true\n   */\n  isDampingEnabled?: boolean;\n  /**\n   * sets the scaling factor for the radius of rotation handles\n   * @default 1.0\n   */\n  rotationRadiusScale?: number;\n  /**\n   * sets the scaling factor for the radius of rotation handles in eye plane\n   * @default 1.25\n   */\n  eyeRotationRadiusScale?: number;\n  /**\n   * sets the width and height scale for the pick plane handles\n   * @default 0.75\n   */\n  pickPlaneSizeScale?: number;\n  /**\n   * sets the scaling for distance between translation handles' start and the\n   * center of the controls\n   * @default 1.0\n   */\n  translationDistanceScale?: number;\n  /**\n   * For translation handles: highlights the axis along which the object moves.\n   * For rotation handles: highlights the axis of rotation.\n   * Not available on other handles.\n   * @default true\n   */\n  highlightAxis?: boolean;\n  /**\n   * Enables snap to grid (nearest integer coordinate) for all translation type handles:\n   * [[TranslationGroup]], [[PickGroup]], and [[PickPlaneGroup]]\n   * @default { x: false, y: false, z: false }\n   */\n  snapTranslation?: {\n    x: boolean;\n    y: boolean;\n    z: boolean;\n  };\n}\n\n/**\n * Controls is the main class in this library.\n * It is a subclass of THREE.Group, so its properties like `position` and\n * `quaternion` can be modified as desired.\n * The `children` are the control handles (like `rotationX`).\n * All translations and rotations are setup with respect to the global coordinate system.\n * @noInheritDoc\n */\nexport default class Controls extends Group {\n  /**\n   * handle which translates the object in the eye-plane\n   */\n  public readonly pick: Pick;\n  /**\n   * handle which translates the object in XY plane\n   */\n  public readonly pickPlaneXY: PickPlane;\n  /**\n   * handle which translates the object in YZ plane\n   */\n  public readonly pickPlaneYZ: PickPlane;\n  /**\n   * handle which translates the object in ZX plane\n   */\n  public readonly pickPlaneZX: PickPlane;\n  /**\n   * handle which translates the object along the x-axis; displayed in the\n   * +ve x-axis direction\n   */\n  public readonly translationXP: Translation;\n  /**\n   * handle which translates the object along the y-axis; displayed in the\n   * +ve y-axis direction\n   */\n  public readonly translationYP: Translation;\n  /**\n   * handle which translates the object along the z-axis; displayed in the\n   * +ve z-axis direction\n   */\n  public readonly translationZP: Translation;\n  /**\n   * handle which translates the object along the x-axis; displayed in the\n   * -ve x-axis direction\n   */\n  public readonly translationXN: Translation;\n  /**\n   * handle which translates the object along the y-axis; displayed in the\n   * -ve y-axis direction\n   */\n  public readonly translationYN: Translation;\n  /**\n   * handle which translates the object along the z-axis; displayed in the\n   * -ve z-axis direction\n   */\n  public readonly translationZN: Translation;\n  /**\n   * handle which rotates the object along the x-axis\n   */\n  public readonly rotationX: Rotation;\n  /**\n   * handle which rotates the object along the y-axis\n   */\n  public readonly rotationY: Rotation;\n  /**\n   * handle which rotates the object along the z-axis\n   */\n  public readonly rotationZ: Rotation;\n  /**\n   * handle which rotates the object in the eye-plane\n   */\n  public readonly rotationEye: RotationEye;\n  private handleTargetQuaternion = new Quaternion();\n  private objectWorldPosition = new Vector3();\n  private objectTargetPosition = new Vector3();\n  private objectTargetQuaternion = new Quaternion();\n  private objectParentWorldPosition = new Vector3();\n  private objectParentWorldQuaternion = new Quaternion();\n  private objectParentWorldScale = new Vector3();\n  private deltaPosition = new Vector3();\n  private normalizedHandleParallelVectorCache = new Vector3();\n  private touch1 = new Vector3();\n  private touch2 = new Vector3();\n  private boundingSphereRadius = 0;\n  private dragStartPoint = new Vector3();\n  private dragIncrementalStartPoint = new Vector3();\n  private handles: Set<IHandle> = new Set();\n  private isBeingDraggedTranslation = false;\n  private isBeingDraggedRotation = false;\n  private dampingFactor = 0.8;\n  private readonly useComputedBounds: boolean;\n  private readonly separation: number;\n  private initialSelfQuaternion = new Quaternion();\n  private readonly minTranslationCache = new Vector3();\n  private readonly maxTranslationCache = new Vector3();\n  private readonly options: IControlsOptions;\n  private readonly mode: ANCHOR_MODE;\n  private readonly translationDistanceScale: number;\n  private readonly rotationRadiusScale: number;\n  private readonly eyeRotationRadiusScale: number;\n  private readonly pickPlaneSizeScale: number;\n  private translationLimit?: TranslationLimit | false = false;\n  private translationAnchor: Vector3 | null = null;\n\n  /**\n   * enables damping for the controls\n   * @default true\n   */\n  public isDampingEnabled: boolean;\n  /**\n   * hides other handles of a Controls instance when drag starts\n   * @default true\n   */\n  public hideOtherHandlesOnDrag: boolean;\n  /**\n   *  hides all other Controls instances when drag starts\n   *  @default true\n   */\n  public hideOtherControlsInstancesOnDrag: boolean;\n  /**\n   * displays the plane in which the drag interaction takes place\n   * (useful for debugging)\n   * @default false\n   */\n  public showHelperPlane: boolean;\n  /**\n   * For translation handles: highlights the axis along which the object moves.\n   * For rotation handles: highlights the axis of rotation.\n   * Not available on other handles.\n   * @default true\n   */\n  public highlightAxis: boolean;\n  /**\n   * Enables snap to grid (nearest integer coordinate) for all translation type handles:\n   * [[TranslationGroup]], [[PickGroup]], and [[PickPlaneGroup]]\n   * @default { x: false, y: false, z: false }\n   */\n  public snapTranslation: {\n    x: boolean;\n    y: boolean;\n    z: boolean;\n  };\n\n  /**\n   *\n   * @param object - the object provided by the user\n   * @param camera - the THREE.Camera instance used in the scene\n   * @param options\n   */\n  constructor(\n    public object: Object3D,\n    private camera: Camera,\n    options?: IControlsOptions\n  ) {\n    super();\n\n    this.options = options || {};\n    this.mode = this.options?.mode ?? ANCHOR_MODE.FIXED;\n    this.hideOtherHandlesOnDrag = this.options?.hideOtherHandlesOnDrag ?? true;\n    this.hideOtherControlsInstancesOnDrag = this.options?.hideOtherControlsInstancesOnDrag ?? true;\n    this.showHelperPlane = this.options?.showHelperPlane ?? false;\n    this.highlightAxis = this.options?.highlightAxis ?? true;\n    this.useComputedBounds = this.options?.useComputedBounds ?? false;\n    this.snapTranslation = this.options?.snapTranslation ?? {\n      x: false,\n      y: false,\n      z: false\n    };\n    this.separation = this.options?.separation ?? DEFAULT_CONTROLS_SEPARATION;\n    this.isDampingEnabled = this.options?.isDampingEnabled ?? true;\n    this.rotationRadiusScale = this.options?.rotationRadiusScale ?? DEFAULT_ROTATION_RADIUS_SCALE;\n    this.eyeRotationRadiusScale =\n      this.options?.eyeRotationRadiusScale ?? DEFAULT_EYE_ROTATION_SCALE;\n    this.pickPlaneSizeScale = this.options?.pickPlaneSizeScale ?? DEFAULT_PLANE_SIZE_SCALE;\n    this.translationDistanceScale =\n      this.options?.translationDistanceScale ?? DEFAULT_TRANSLATION_DISTANCE_SCALE;\n\n    if (this.options.orientation !== undefined) {\n      const { x, y, z, w } = this.options.orientation;\n      this.initialSelfQuaternion.set(x, y, z, w).normalize();\n      this.quaternion.copy(this.initialSelfQuaternion);\n    }\n\n    this.computeObjectBounds();\n\n    this.pick = new Pick();\n\n    this.pickPlaneXY = new PickPlane(\n      \"yellow\",\n      this.boundingSphereRadius * this.pickPlaneSizeScale,\n      this.boundingSphereRadius * this.pickPlaneSizeScale\n    );\n    this.pickPlaneYZ = new PickPlane(\n      \"cyan\",\n      this.boundingSphereRadius * this.pickPlaneSizeScale,\n      this.boundingSphereRadius * this.pickPlaneSizeScale\n    );\n    this.pickPlaneZX = new PickPlane(\n      \"pink\",\n      this.boundingSphereRadius * this.pickPlaneSizeScale,\n      this.boundingSphereRadius * this.pickPlaneSizeScale\n    );\n\n    this.translationXP = new Translation(\"red\");\n    this.translationYP = new Translation(\"green\");\n    this.translationZP = new Translation(\"blue\");\n\n    this.translationXN = new Translation(\"red\");\n    this.translationYN = new Translation(\"green\");\n    this.translationZN = new Translation(\"blue\");\n\n    this.rotationX = new Rotation(\"red\", this.boundingSphereRadius * this.rotationRadiusScale);\n    this.rotationY = new Rotation(\"green\", this.boundingSphereRadius * this.rotationRadiusScale);\n    this.rotationZ = new Rotation(\"blue\", this.boundingSphereRadius * this.rotationRadiusScale);\n\n    this.rotationEye = new RotationEye(\n      \"yellow\",\n      this.boundingSphereRadius * this.eyeRotationRadiusScale\n    );\n\n    this.setupDefaultTranslation();\n    this.setupDefaultRotation();\n    this.setupDefaultEyeRotation();\n    this.setupDefaultPickPlane();\n    this.setupDefaultPick();\n  }\n\n  private setupDefaultPickPlane = () => {\n    this.pickPlaneXY.name = DEFAULT_HANDLE_GROUP_NAME.PICK_PLANE_XY;\n    this.pickPlaneYZ.name = DEFAULT_HANDLE_GROUP_NAME.PICK_PLANE_YZ;\n    this.pickPlaneZX.name = DEFAULT_HANDLE_GROUP_NAME.PICK_PLANE_ZX;\n\n    this.pickPlaneYZ.up = new Vector3(1, 0, 0);\n    this.pickPlaneZX.up = new Vector3(0, 1, 0);\n    this.pickPlaneXY.up = new Vector3(0, 0, 1);\n\n    this.pickPlaneYZ.rotateY(Math.PI / 2);\n    this.pickPlaneZX.rotateX(Math.PI / 2);\n\n    this.setupHandle(this.pickPlaneXY);\n    this.setupHandle(this.pickPlaneYZ);\n    this.setupHandle(this.pickPlaneZX);\n  };\n\n  public setupHandle = (handle: IHandle) => {\n    this.handles.add(handle);\n    this.add(handle);\n  };\n\n  private setupDefaultPick = () => {\n    this.pick.name = DEFAULT_HANDLE_GROUP_NAME.PICK;\n    this.setupHandle(this.pick);\n  };\n\n  private setupDefaultEyeRotation = () => {\n    this.rotationEye.name = DEFAULT_HANDLE_GROUP_NAME.ER;\n    this.rotationEye.camera = this.camera;\n    this.setupHandle(this.rotationEye);\n  };\n\n  private setupDefaultTranslation = () => {\n    this.translationXP.name = DEFAULT_HANDLE_GROUP_NAME.XPT;\n    this.translationYP.name = DEFAULT_HANDLE_GROUP_NAME.YPT;\n    this.translationZP.name = DEFAULT_HANDLE_GROUP_NAME.ZPT;\n\n    this.translationXN.name = DEFAULT_HANDLE_GROUP_NAME.XNT;\n    this.translationYN.name = DEFAULT_HANDLE_GROUP_NAME.YNT;\n    this.translationZN.name = DEFAULT_HANDLE_GROUP_NAME.ZNT;\n\n    this.translationXP.translateX(this.boundingSphereRadius * this.translationDistanceScale);\n    this.translationYP.translateY(this.boundingSphereRadius * this.translationDistanceScale);\n    this.translationZP.translateZ(this.boundingSphereRadius * this.translationDistanceScale);\n\n    this.translationXN.translateX(-this.boundingSphereRadius * this.translationDistanceScale);\n    this.translationYN.translateY(-this.boundingSphereRadius * this.translationDistanceScale);\n    this.translationZN.translateZ(-this.boundingSphereRadius * this.translationDistanceScale);\n\n    this.translationXP.rotateZ(-Math.PI / 2);\n    this.translationZP.rotateX(Math.PI / 2);\n\n    this.translationXN.rotateZ(Math.PI / 2);\n    this.translationYN.rotateX(Math.PI);\n    this.translationZN.rotateX(-Math.PI / 2);\n\n    this.translationXP.up = new Vector3(0, 1, 0);\n    this.translationYP.up = new Vector3(0, 0, 1);\n    this.translationZP.up = new Vector3(0, 1, 0);\n\n    this.translationXN.up = new Vector3(0, -1, 0);\n    this.translationYN.up = new Vector3(0, 0, -1);\n    this.translationZN.up = new Vector3(0, -1, 0);\n\n    this.translationXP.parallel = new Vector3(1, 0, 0);\n    this.translationYP.parallel = new Vector3(0, 1, 0);\n    this.translationZP.parallel = new Vector3(0, 0, 1);\n\n    this.translationXN.parallel = new Vector3(-1, 0, 0);\n    this.translationYN.parallel = new Vector3(0, -1, 0);\n    this.translationZN.parallel = new Vector3(0, 0, -1);\n\n    this.setupHandle(this.translationXP);\n    this.setupHandle(this.translationYP);\n    this.setupHandle(this.translationZP);\n\n    this.setupHandle(this.translationXN);\n    this.setupHandle(this.translationYN);\n    this.setupHandle(this.translationZN);\n  };\n\n  private setupDefaultRotation = () => {\n    this.rotationX.name = DEFAULT_HANDLE_GROUP_NAME.XR;\n    this.rotationY.name = DEFAULT_HANDLE_GROUP_NAME.YR;\n    this.rotationZ.name = DEFAULT_HANDLE_GROUP_NAME.ZR;\n\n    this.rotationX.up = new Vector3(1, 0, 0);\n    this.rotationY.up = new Vector3(0, 1, 0);\n    this.rotationZ.up = new Vector3(0, 0, 1);\n\n    this.rotationY.rotateX(Math.PI / 2);\n    this.rotationX.rotateY(Math.PI / 2);\n    this.rotationX.rotateZ(Math.PI);\n\n    this.setupHandle(this.rotationX);\n    this.setupHandle(this.rotationY);\n    this.setupHandle(this.rotationZ);\n  };\n\n  private computeObjectBounds = () => {\n    if (this.useComputedBounds) {\n      if (this.object.type === \"Mesh\") {\n        const geometry = (this.object as Mesh).geometry;\n        geometry.computeBoundingSphere();\n        const { boundingSphere } = geometry;\n        const radius = boundingSphere?.radius ?? 0;\n        this.boundingSphereRadius = radius / 2 + this.separation;\n        return;\n      } else {\n        console.warn(\n          `Bounds can only be computed for object of type THREE.Mesh,\n          received object with type: ${this.object.type}. Falling back to using\n          default separation.\n        `\n        );\n      }\n    }\n    this.boundingSphereRadius = this.separation;\n  };\n\n  /**\n   * Puts a limit on the object's translation anchored at the current position.\n   *\n   * `{ x: [-1, 2], y: false, z: false }` - sets the translation limit to `-1` unit\n   * in the -x-direction, `+2` units in the +x-direction, and no limit on the\n   * y and z-direction.\n   *\n   * Setting the limit to `false` disables the limit in all directions.\n   * @param limit\n   */\n  public setTranslationLimit = (limit: TranslationLimit | false) => {\n    this.translationLimit = limit;\n    this.translationAnchor = limit ? this.position.clone() : null;\n  };\n\n  /**\n   * @hidden\n   */\n  processDragStart = (args: { point: Vector3; handle: IHandle }) => {\n    const { point, handle } = args;\n    this.dragStartPoint.copy(point);\n    this.dragIncrementalStartPoint.copy(point);\n    this.isBeingDraggedTranslation =\n      handle instanceof TranslationGroup ||\n      handle instanceof PickGroup ||\n      handle instanceof PickPlaneGroup;\n    this.isBeingDraggedRotation = handle instanceof RotationGroup;\n  };\n\n  /**\n   * @hidden\n   */\n  processDragEnd = (args: { handle: IHandle }) => {\n    const { handle } = args;\n    const { x: xSnap, y: ySnap, z: zSnap } = this.snapTranslation;\n    const snap = [xSnap, ySnap, zSnap];\n    if (\n      handle instanceof TranslationGroup ||\n      handle instanceof PickPlaneGroup ||\n      handle instanceof PickGroup\n    ) {\n      const xyz = this.object.position.toArray();\n      const floor = xyz.map(Math.floor);\n      const ceil = xyz.map(Math.ceil);\n      const snapFloor = xyz.map((p, index) => ceil[index] - p >= p - floor[index]);\n      const position = xyz.map((p, index) => {\n        if (!snap[index]) {\n          return p;\n        }\n        return snapFloor[index] ? floor[index] : ceil[index];\n      });\n      this.object.position.fromArray(position);\n    }\n    this.isBeingDraggedTranslation = false;\n    this.isBeingDraggedRotation = false;\n  };\n\n  /**\n   * Only takes effect if [[IControlsOptions.isDampingEnabled]] is true.\n   * @param dampingFactor - value between 0 and 1, acts like a weight on the controls\n   */\n  public setDampingFactor = (dampingFactor = 0) =>\n    (this.dampingFactor = MathUtils.clamp(dampingFactor, 0, 1));\n\n  /**\n   * @hidden\n   */\n  processDrag = (args: { point: Vector3; handle: IHandle; dragRatio?: number }) => {\n    const { point, handle, dragRatio = 1 } = args;\n    const k = Math.exp(-this.dampingFactor * Math.abs(dragRatio ** 3));\n\n    if (handle instanceof TranslationGroup) {\n      this.deltaPosition.copy(point).sub(this.dragIncrementalStartPoint);\n      this.normalizedHandleParallelVectorCache\n        .copy(handle.parallel.normalize())\n        .applyQuaternion(this.quaternion);\n\n      const delta = this.deltaPosition.dot(this.normalizedHandleParallelVectorCache);\n      this.deltaPosition\n        .copy(this.normalizedHandleParallelVectorCache)\n        .multiplyScalar(this.isDampingEnabled ? k * delta : delta);\n\n      this.position.copy(this.getLimitedTranslation(this.deltaPosition));\n    } else if (handle instanceof PickGroup || handle instanceof PickPlaneGroup) {\n      this.deltaPosition\n        .copy(point)\n        .sub(this.dragIncrementalStartPoint)\n        .multiplyScalar(this.isDampingEnabled ? k : 1);\n\n      this.position.copy(this.getLimitedTranslation(this.deltaPosition));\n    } else {\n      this.touch1\n        .copy(this.dragIncrementalStartPoint)\n        .sub(this.objectWorldPosition)\n        .normalize();\n\n      this.touch2\n        .copy(point)\n        .sub(this.objectWorldPosition)\n        .normalize();\n\n      this.handleTargetQuaternion.setFromUnitVectors(this.touch1, this.touch2);\n      if (this.mode === ANCHOR_MODE.FIXED) {\n        this.detachHandleUpdateQuaternionAttach(handle, this.handleTargetQuaternion);\n      }\n    }\n\n    this.objectTargetQuaternion.premultiply(this.handleTargetQuaternion);\n    this.dragIncrementalStartPoint.copy(point);\n  };\n\n  private getLimitedTranslation = (translation: Vector3) => {\n    const position = translation.add(this.position);\n    if (!this.translationAnchor || !this.translationLimit) {\n      return position;\n    }\n    const { x: xLimit, y: yLimit, z: zLimit } = this.translationLimit;\n    const { x: xAnchor, y: yAnchor, z: zAnchor } = this.translationAnchor;\n    const { x, y, z } = position;\n    this.minTranslationCache.set(\n      xLimit ? xAnchor + xLimit[0] : x,\n      yLimit ? yAnchor + yLimit[0] : y,\n      zLimit ? zAnchor + zLimit[0] : z\n    );\n    this.maxTranslationCache.set(\n      xLimit ? xAnchor + xLimit[1] : x,\n      yLimit ? yAnchor + yLimit[1] : y,\n      zLimit ? zAnchor + zLimit[1] : z\n    );\n    return position.clamp(this.minTranslationCache, this.maxTranslationCache);\n  };\n\n  private detachObjectUpdatePositionAttach = (\n    parent: Object3D | null,\n    object: Object3D\n  ) => {\n    if (parent !== null && this.parent !== null && this.parent.parent !== null) {\n      const scene = this.parent.parent;\n      if (scene.type !== \"Scene\") {\n        throw new Error(\"freeform controls must be attached to the scene\");\n      }\n      scene.attach(object);\n      object.position.copy(this.objectTargetPosition);\n      parent.attach(object);\n    }\n  };\n\n  private detachHandleUpdateQuaternionAttach = (handle: IHandle, quaternion: Quaternion) => {\n    if (this.parent !== null && this.parent.parent) {\n      const scene = this.parent.parent;\n      if (scene.type !== \"Scene\") {\n        throw new Error(\"freeform controls must be attached to the scene\");\n      }\n      scene.attach(handle);\n      handle.applyQuaternion(quaternion);\n      this.attach(handle);\n    }\n  };\n\n  /**\n   * Applies supplied visibility to the supplied handle names.\n   * Individual handle's visibility can also be changed by modifying the `visibility`\n   * property on the handle directly.\n   * @param handleNames\n   * @param visibility\n   */\n  public showByNames = (\n    handleNames: Array<DEFAULT_HANDLE_GROUP_NAME | string>,\n    visibility = true\n  ) => {\n    const handleNamesMap: { [name: string]: IHandle | undefined } = {};\n    this.handles.forEach(handle => {\n      handleNamesMap[handle.name] = handle;\n    });\n    handleNames.map(handleName => {\n      const handle = handleNamesMap[handleName];\n      if (handle === undefined) {\n        throw new Error(`handle: ${handleName} not found`);\n      }\n      handle.visible = visibility;\n    });\n  };\n\n  /**\n   * Applies supplied visibility to all handles\n   * @param visibility\n   */\n  public showAll = (visibility = true) => {\n    this.handles.forEach(handle => {\n      handle.visible = visibility;\n    });\n  };\n\n  /**\n   * @hidden\n   */\n  public getInteractiveObjects(): Object3D[] {\n    const interactiveObjects: Object3D[] = [];\n    this.handles.forEach(handle => {\n      if (!handle.visible) {\n        return;\n      }\n      interactiveObjects.push(...handle.getInteractiveObjects());\n    });\n    return interactiveObjects;\n  }\n\n  /**\n   * @hidden\n   */\n  updateMatrixWorld = (force?: boolean) => {\n    this.object.updateMatrixWorld(force);\n\n    this.object.getWorldPosition(this.objectWorldPosition);\n    const parent = this.object.parent;\n    if (parent !== null) {\n      parent.matrixWorld.decompose(\n        this.objectParentWorldPosition,\n        this.objectParentWorldQuaternion,\n        this.objectParentWorldScale\n      );\n    }\n    this.objectParentWorldQuaternion.invert();\n    this.objectTargetPosition.copy(this.position);\n    this.objectTargetQuaternion.premultiply(this.objectParentWorldQuaternion);\n\n    if (this.isBeingDraggedTranslation) {\n      this.detachObjectUpdatePositionAttach(parent, this.object);\n    } else if (this.isBeingDraggedRotation) {\n      this.object.quaternion.copy(this.objectTargetQuaternion);\n      this.detachObjectUpdatePositionAttach(parent, this.object);\n    } else {\n      this.position.copy(this.objectWorldPosition);\n    }\n\n    this.object.getWorldQuaternion(this.objectTargetQuaternion);\n    if (this.mode === ANCHOR_MODE.INHERIT && !this.isBeingDraggedTranslation) {\n      this.quaternion.copy(this.initialSelfQuaternion).premultiply(this.objectTargetQuaternion);\n    }\n\n    super.updateMatrixWorld(force);\n  };\n}\n","import {\n  Vector3,\n  BufferGeometry,\n  Float32BufferAttribute,\n  MeshBasicMaterial\n} from \"three\";\nimport Cone from \"../../primitives/cone\";\nimport {\n  DEFAULT_COLOR_ARROW,\n  DEFAULT_CONE_HEIGHT,\n  DEFAULT_CONE_RADIUS,\n  DEFAULT_LINE_HEIGHT\n} from \"../../utils/constants\";\nimport Line from \"../../primitives/line\";\nimport { TranslationGroup } from \"./index\";\n\nexport default class Translation extends TranslationGroup {\n  private readonly cone: Cone;\n  private readonly line: Line;\n  public parallel = new Vector3(0, 1, 0);\n\n  constructor(color = DEFAULT_COLOR_ARROW) {\n    super();\n    this.cone = new Cone(color);\n    const lineGeometry = new BufferGeometry();\n    lineGeometry.setAttribute( 'position', new Float32BufferAttribute([\n      0, 0, 0,\n      0, DEFAULT_LINE_HEIGHT, 0\n    ], 3 ));\n\n    this.line = new Line(color, lineGeometry);\n    this.cone.geometry.scale(DEFAULT_CONE_RADIUS, DEFAULT_CONE_HEIGHT, DEFAULT_CONE_RADIUS);\n    this.cone.translateY(DEFAULT_LINE_HEIGHT);\n\n    this.add(this.cone);\n    this.add(this.line);\n  }\n\n  /**\n   * @hidden\n   */\n  public getInteractiveObjects = () => {\n    return [this.cone];\n  };\n\n  public setColor = (color: string) => {\n    const coneMaterial = this.cone.material as MeshBasicMaterial;\n    const lineMaterial = this.line.material as MeshBasicMaterial;\n    coneMaterial.color.set(color);\n    lineMaterial.color.set(color);\n  };\n}\n","import { DEFAULT_OCTAHEDRON_RADIUS } from \"../utils/constants\";\nimport {DoubleSide, Mesh, MeshBasicMaterial, OctahedronBufferGeometry} from \"three\";\n\nexport default class Octahedron extends Mesh {\n  constructor(color: string) {\n    super();\n    this.geometry = new OctahedronBufferGeometry(DEFAULT_OCTAHEDRON_RADIUS, 0);\n    this.material = new MeshBasicMaterial({\n      color,\n      depthTest: false,\n      transparent: true,\n      side: DoubleSide\n    });\n  }\n}\n","import {\n  BufferGeometry,\n  Float32BufferAttribute,\n  MeshBasicMaterial\n} from \"three\";\nimport {\n  DEFAULT_COLOR_RING,\n  DEFAULT_RING_NUM_POINTS,\n  DEFAULT_RING_RADIUS\n} from \"../../utils/constants\";\nimport Line from \"../../primitives/line\";\nimport Octahedron from \"../../primitives/octahedron\";\nimport { RotationGroup } from \"./index\";\n\nexport default class Rotation extends RotationGroup {\n  private readonly ring: Line;\n  private readonly handlebar: Octahedron;\n\n  constructor(color = DEFAULT_COLOR_RING, ringRadius = DEFAULT_RING_RADIUS) {\n    super();\n    const ringNumberOfPoints = DEFAULT_RING_NUM_POINTS;\n    const ringGeometry = new BufferGeometry();\n    const angle = (2 * Math.PI) / ringNumberOfPoints;\n    const vertices  =[];\n    for (let i = 1; i < ringNumberOfPoints + 1; i++) {\n      vertices.push(ringRadius * Math.cos(i * angle), ringRadius * Math.sin(i * angle), 0);\n    }\n    ringGeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    this.ring = new Line(color, ringGeometry);\n    this.handlebar = new Octahedron(color);\n    this.handlebar.position.y = ringRadius;\n    this.add(this.ring);\n    this.add(this.handlebar);\n  }\n\n  /**\n   * @hidden\n   */\n  public getInteractiveObjects = () => {\n    return [this.handlebar];\n  };\n\n  public setColor = (color: string) => {\n    const ringMaterial = this.ring.material as MeshBasicMaterial;\n    const handlebarMaterial = this.handlebar.material as MeshBasicMaterial;\n    ringMaterial.color.set(color);\n    handlebarMaterial.color.set(color);\n  };\n}\n","import {\n\nMeshBasicMaterial\n} from \"three\";\nimport Octahedron from \"../../primitives/octahedron\";\nimport { PickGroup } from \"./index\";\n\nexport default class Pick extends PickGroup {\n  private readonly octahedron: Octahedron;\n\n  constructor() {\n    super();\n    this.octahedron = new Octahedron(\"white\");\n    this.add(this.octahedron);\n  }\n\n  /**\n   * @hidden\n   */\n  public getInteractiveObjects = () => {\n    return [this.octahedron];\n  };\n\n  public setColor = (color: string) => {\n    const octahedronMaterial = this.octahedron.material as MeshBasicMaterial;\n    octahedronMaterial.color.set(color);\n  };\n}\n","import {\n  DEFAULT_COLOR_RING,\n  DEFAULT_PLANE_HEIGHT,\n  DEFAULT_PLANE_SEGMENTS,\n  DEFAULT_PLANE_WIDTH,\n  PICK_PLANE_OPACITY\n} from \"../utils/constants\";\nimport {DoubleSide, Mesh, MeshBasicMaterial, PlaneGeometry} from \"three\";\n\nexport default class Plane extends Mesh {\n  constructor(\n    color = DEFAULT_COLOR_RING,\n    width = DEFAULT_PLANE_WIDTH,\n    height = DEFAULT_PLANE_HEIGHT\n  ) {\n    super();\n    this.geometry = new PlaneGeometry(width, height, DEFAULT_PLANE_SEGMENTS);\n    this.material = new MeshBasicMaterial({\n      color,\n      depthTest: false,\n      side: DoubleSide,\n      transparent: true\n    });\n    this.material.opacity = PICK_PLANE_OPACITY.INACTIVE;\n  }\n}\n","import {\n  BufferGeometry,\n  Float32BufferAttribute,\n  MeshBasicMaterial,\n} from \"three\";\nimport Plane from \"../../primitives/plane\";\nimport {\n  DEFAULT_COLOR_PLANE,\n  DEFAULT_PLANE_HEIGHT,\n  DEFAULT_PLANE_WIDTH\n} from \"../../utils/constants\";\nimport Line from \"../../primitives/line\";\nimport { PickPlaneGroup } from \"./index\";\n\nexport default class PickPlane extends PickPlaneGroup {\n  /**\n   * @hidden\n   */\n  public readonly plane: Plane;\n  /**\n   * @hidden\n   */\n  public readonly boundary: Line;\n  /**\n   * @hidden\n   */\n  public readonly crossX: Line;\n  /**\n   * @hidden\n   */\n  public readonly crossY: Line;\n\n  constructor(\n    color = DEFAULT_COLOR_PLANE,\n    width = DEFAULT_PLANE_WIDTH,\n    height = DEFAULT_PLANE_HEIGHT\n  ) {\n    super();\n    const boundaryGeometry = new BufferGeometry();\n    const crossXGeometry = new BufferGeometry();\n    const crossYGeometry = new BufferGeometry();\n\n    const vertexMaxX = width / 2;\n    const vertexMaxY = height / 2;\n\n    boundaryGeometry.setAttribute( 'position', new Float32BufferAttribute([\n      vertexMaxX, vertexMaxY, 0,\n      vertexMaxX, -vertexMaxY, 0,\n      -vertexMaxX, -vertexMaxY, 0,\n      -vertexMaxX, vertexMaxY, 0\n    ], 3 ));\n\n    crossXGeometry.setAttribute( 'position', new Float32BufferAttribute([\n      0, vertexMaxY, 0,\n      0, -vertexMaxY, 0,\n    ], 3 ));\n\n    crossYGeometry.setAttribute( 'position', new Float32BufferAttribute([\n      -vertexMaxX, 0, 0,\n      vertexMaxX, 0, 0,\n    ], 3 ));\n\n    this.boundary = new Line(color, boundaryGeometry);\n    this.crossX = new Line(\"black\", crossXGeometry);\n    this.crossY = new Line(\"black\", crossYGeometry);\n    this.plane = new Plane(color, width, height);\n\n    this.add(this.plane);\n    this.add(this.boundary);\n    this.add(this.crossX);\n    this.add(this.crossY);\n  }\n\n  /**\n   * @hidden\n   */\n  public getInteractiveObjects = () => {\n    return [this.plane];\n  };\n\n  public setColor = (color: string) => {\n    const planeMaterial = this.plane.material as MeshBasicMaterial;\n    const boundaryMaterial = this.boundary.material as MeshBasicMaterial;\n    planeMaterial.color.set(color);\n    boundaryMaterial.color.set(color);\n  };\n}\n","import {\n  Camera,\n  Quaternion,\n  Vector3\n} from \"three\";\nimport Rotation from \"./rotation\";\nimport { DEFAULT_COLOR_RING, DEFAULT_RING_RADIUS } from \"../../utils/constants\";\n\n/**\n * @hidden\n */\nexport default class RotationEye extends Rotation {\n  public camera: Camera | null = null;\n  private controlsWorldOrientation = new Quaternion();\n  private _temp1 = new Vector3();\n  private _temp2 = new Vector3();\n  private _temp3 = new Quaternion();\n  private worldPosition = new Vector3();\n\n  constructor(color = DEFAULT_COLOR_RING, radius = DEFAULT_RING_RADIUS) {\n    super(color, radius);\n  }\n\n  updateMatrixWorld(force?: boolean): void {\n    if (this.camera !== null) {\n      this.parent?.matrixWorld.decompose(this._temp1, this.controlsWorldOrientation, this._temp2);\n      this.matrixWorld.decompose(this.worldPosition, this._temp3, this._temp2);\n      this.camera\n        .getWorldQuaternion(this.quaternion)\n        .premultiply(this.controlsWorldOrientation.invert());\n      this.camera.getWorldPosition(this.up).sub(this.worldPosition);\n    }\n    super.updateMatrixWorld(force);\n  }\n}\n","(\n  /**\n   * Interface for event subscription.\n   *\n   * @example\n   * var NanoEvents = require('nanoevents')\n   *\n   * class Ticker {\n   *   constructor() {\n   *     this.emitter = new NanoEvents()\n   *   }\n   *   on() {\n   *     return this.emitter.on.apply(this.events, arguments)\n   *   }\n   *   tick() {\n   *     this.emitter.emit('tick')\n   *   }\n   * }\n   *\n   * @alias NanoEvents\n   * @class\n   */\n  module.exports = function NanoEvents () {\n    /**\n     * Event names in keys and arrays with listeners in values.\n     * @type {object}\n     *\n     * @example\n     * Object.keys(ee.events)\n     *\n     * @alias NanoEvents#events\n     */\n    this.events = { }\n  }\n).prototype = {\n\n  /**\n   * Calls each of the listeners registered for a given event.\n   *\n   * @param {string} event The event name.\n   * @param {...*} arguments The arguments for listeners.\n   *\n   * @return {undefined}\n   *\n   * @example\n   * ee.emit('tick', tickType, tickDuration)\n   *\n   * @alias NanoEvents#emit\n   * @method\n   */\n  emit: function emit (event) {\n    var args = [].slice.call(arguments, 1)\n    // Array.prototype.call() returns empty array if context is not array-like\n    ;[].slice.call(this.events[event] || []).filter(function (i) {\n      i.apply(null, args)\n    })\n  },\n\n  /**\n   * Add a listener for a given event.\n   *\n   * @param {string} event The event name.\n   * @param {function} cb The listener function.\n   *\n   * @return {function} Unbind listener from event.\n   *\n   * @example\n   * const unbind = ee.on('tick', (tickType, tickDuration) => {\n   *   count += 1\n   * })\n   *\n   * disable () {\n   *   unbind()\n   * }\n   *\n   * @alias NanoEvents#on\n   * @method\n   */\n  on: function on (event, cb) {\n    if (process.env.NODE_ENV !== 'production' && typeof cb !== 'function') {\n      throw new Error('Listener must be a function')\n    }\n\n    (this.events[event] = this.events[event] || []).push(cb)\n\n    return function () {\n      this.events[event] = this.events[event].filter(function (i) {\n        return i !== cb\n      })\n    }.bind(this)\n  }\n}\n","/**\n * Removes all listeners.\n *\n * @param {NanoEvents} emitter NanoEvents instance.\n *\n * @returns {undefined}\n *\n * @example\n * unbindAll(emitter)\n */\nfunction unbindAll (emitter) {\n  emitter.events = { }\n}\n\nmodule.exports = unbindAll\n","import NanoEvents from \"nanoevents\";\nimport unbindAllEvents from \"nanoevents/unbind-all\";\nimport { EVENTS } from \"./raycaster\";\nimport { IHandle } from \"../controls/handles\";\nimport {Vector3} from \"three\";\n\nexport const emitter = new NanoEvents<\n  {\n    [event in EVENTS]: {\n      point: Vector3;\n      handle: IHandle | null;\n      dragRatio?: number;\n    };\n  }\n>();\nexport const unbindAll = () => unbindAllEvents(emitter);\n","import {Group, WebXRController} from \"three\";\n\nexport const getPointFromEvent = (event: MouseEvent | TouchEvent) => {\n  let clientX = 0;\n  let clientY = 0;\n  if (event instanceof MouseEvent) {\n    clientX = event.clientX;\n    clientY = event.clientY;\n  } else if (event instanceof TouchEvent) {\n    if (event.touches.length === 0) {\n      return null;\n    }\n    clientX = event.touches[0].clientX;\n    clientY = event.touches[0].clientY;\n  }\n  return { clientX, clientY };\n};\n\nexport const addEventListener = (\n  element: HTMLElement | WebXRController,\n  eventNames: Array<\n    \"pointerdown\" | \"touchstart\" | \"pointerup\" | \"touchend\" | \"pointermove\" | \"touchmove\" | \"selectstart\" | \"selectend\"\n  >,\n  callback: (event: MouseEvent | TouchEvent) => void,\n  options: { passive?: boolean; capture?: boolean } | boolean = false\n) => {\n  eventNames.forEach(name => {\n    (element as any).addEventListener(name, callback, options);\n  });\n};\n\nexport const removeEventListener = (\n  element: HTMLElement | WebXRController,\n  eventNames: Array<\n    \"pointerdown\" | \"touchstart\" | \"pointerup\" | \"touchend\" | \"pointermove\" | \"touchmove\" | \"selectstart\" | \"selectend\"\n  >,\n  callback: (event: MouseEvent | TouchEvent) => void,\n  options: { capture?: boolean } | boolean = false\n) => {\n  eventNames.forEach(name => {\n    (element as any).removeEventListener(name, callback, options);\n  });\n};\n","import { emitter } from \"./emmiter\";\nimport Controls from \"../controls\";\nimport PickPlane from \"../controls/handles/pick-plane\";\nimport { PICK_PLANE_OPACITY } from \"./constants\";\nimport { IHandle, PickGroup, RotationGroup, TranslationGroup } from \"../controls/handles\";\nimport RotationEye from \"../controls/handles/rotation-eye\";\nimport { addEventListener, getPointFromEvent, removeEventListener } from \"./helper\";\nimport Line from \"../primitives/line\";\nimport {\n  BufferGeometry,\n  Camera,\n  Float32BufferAttribute,\n  Intersection,\n  Object3D, Plane,\n  PlaneHelper,\n  Quaternion, Scene,\n  Vector2,\n  Vector3,\n  Raycaster as ThreeRaycaster\n} from \"three\";\n\nexport enum EVENTS {\n  DRAG_START = \"DRAG_START\",\n  DRAG = \"DRAG\",\n  DRAG_STOP = \"DRAG_STOP\"\n}\n\n/**\n * @hidden\n * The Raycaster listens on the mouse and touch events globally and\n * dispatches DRAG_START, DRAG, and DRAG_STOP events.\n */\nexport default class Raycaster extends ThreeRaycaster {\n  private mouse = new Vector2();\n  private cameraPosition = new Vector3();\n  private activeHandle: IHandle | null = null;\n  private activePlane: Plane | null = null;\n  private point = new Vector3();\n  private normal = new Vector3();\n  private visibleHandles: Object3D[] = [];\n  private visibleControls: Object3D[] = [];\n  private helperPlane: PlaneHelper | null = null;\n  private controlsWorldQuaternion = new Quaternion();\n  private clientDiagonalLength = 1;\n  private previousScreenPoint = new Vector2();\n  private currentScreenPoint = new Vector2();\n  private isActivePlaneFlipped = false;\n  private readonly highlightAxisLine: Line;\n\n  constructor(\n    public camera: Camera,\n    private domElement: HTMLElement,\n    private controls: { [id: string]: Controls }\n  ) {\n    super();\n    this.highlightAxisLine = this.createAxisLine();\n    /**\n     * mousedown and touchstart are used instead of pointerdown because\n     * pointermove seems to stop firing after some a few events in chrome mobile\n     * this could be because of some capture/passive setting but couldn't find\n     * anything useful. using touch(*) events works.\n     */\n    addEventListener(this.domElement, [\"pointerdown\", \"touchstart\"], this.pointerDownListener, {\n      passive: false,\n      capture: true\n    });\n    addEventListener(this.domElement, [\"pointerup\", \"touchend\"], this.pointerUpListener, {\n      passive: false,\n      capture: true\n    });\n  }\n\n  private createAxisLine = () => {\n    const geometry = new BufferGeometry();\n    geometry.setAttribute('position', new Float32BufferAttribute([\n      0, 0, -100,\n      0, 0, 100\n    ], 3));\n    return new Line(\"white\", geometry);\n  };\n\n  private pointerDownListener = (event: MouseEvent | TouchEvent) => {\n    const point = getPointFromEvent(event);\n    // touches can be empty\n    if (!point) {\n      return;\n    }\n    const { clientX, clientY } = point;\n    this.setRayDirection(clientX, clientY);\n\n    // useful for calculating dragRatio (used in dampingFactor calculation)\n    this.clientDiagonalLength = Math.sqrt(\n      (event.target as HTMLElement).clientWidth ** 2 +\n        (event.target as HTMLElement).clientHeight ** 2\n    );\n    this.previousScreenPoint.set(clientX, clientY);\n\n    const interactiveObjects: Object3D[] = [];\n    Object.values(this.controls).map(controls => {\n      interactiveObjects.push(...controls.getInteractiveObjects());\n    });\n    this.activeHandle = this.resolveHandleGroup(this.intersectObjects(interactiveObjects, true)[0]);\n\n    if (this.activeHandle?.parent) {\n      const controls = this.activeHandle.parent as Controls;\n\n      // hiding other controls and handles instances if asked\n      if (controls.hideOtherControlsInstancesOnDrag) {\n        Object.values(this.controls).forEach(x => {\n          if (x.visible) {\n            this.visibleControls.push(x);\n          }\n          x.visible = false;\n        });\n        controls.visible = true;\n      }\n\n      if (controls.hideOtherHandlesOnDrag) {\n        controls.children.map(handle => {\n          if (handle.visible) {\n            this.visibleHandles.push(handle);\n          }\n          handle.visible = false;\n        });\n        this.activeHandle.visible = true;\n      }\n\n      if (this.activeHandle instanceof PickPlane) {\n        this.setPickPlaneOpacity(PICK_PLANE_OPACITY.ACTIVE);\n      }\n\n      /**\n       * creating the activePlane - the plane on which intersection actions\n       * take place. mouse movements are translated to points on the activePlane\n       */\n      this.activePlane = new Plane();\n      const eyePlaneNormal = this.getEyePlaneNormal(this.activeHandle);\n      controls.getWorldQuaternion(this.controlsWorldQuaternion);\n      this.normal.copy(\n        this.activeHandle instanceof PickGroup ? eyePlaneNormal : this.activeHandle.up\n      );\n      if (!(this.activeHandle instanceof RotationEye || this.activeHandle instanceof PickGroup)) {\n        this.normal.applyQuaternion(this.controlsWorldQuaternion);\n      }\n      /*\n        if the angle between the eye-normal and the normal to the activePlane is\n        too small, a small mouse movement makes a large projection on the activePlane,\n        causing the object to jump big distances. To avoid this, the activePlane\n        is flipped by 90 degrees about the parallel vector of the handle.\n        This problem only requires mitigation in the TranslationGroup handle case.\n       */\n      if (this.activeHandle instanceof TranslationGroup) {\n        const dot = eyePlaneNormal.dot(this.normal) / eyePlaneNormal.length();\n        // arccos(0.25) ~= 75 degrees\n        // this is the threshold to make the plane normal flip\n        this.isActivePlaneFlipped = Math.abs(dot) < 0.25;\n        if (this.isActivePlaneFlipped) {\n          this.isActivePlaneFlipped = true;\n          this.normal.applyAxisAngle(this.activeHandle.parallel, Math.PI / 2);\n        }\n      }\n      if (this.activeHandle instanceof TranslationGroup) {\n        this.activePlane.setFromNormalAndCoplanarPoint(this.normal, this.activeHandle.position);\n      } else {\n        this.activePlane.setFromNormalAndCoplanarPoint(this.normal, controls.position);\n      }\n\n      // find initial intersection\n      const initialIntersectionPoint = new Vector3();\n      if (this.activeHandle instanceof PickGroup) {\n        this.activeHandle.getWorldPosition(initialIntersectionPoint);\n      } else {\n        this.ray.intersectPlane(this.activePlane, initialIntersectionPoint);\n      }\n\n      // activate the helper plane if asked\n      // available only for TranslationGroup and RotationGroup\n      // (except RotationEye - plane of rotation is obvious)\n      const scene = controls.parent as Scene;\n      if (\n        controls.showHelperPlane &&\n        (this.activeHandle instanceof TranslationGroup ||\n          this.activeHandle instanceof RotationGroup) &&\n        !(this.activeHandle instanceof RotationEye)\n      ) {\n        this.helperPlane = new PlaneHelper(this.activePlane, 1);\n        scene.add(this.helperPlane);\n      }\n\n      /**\n       * activate the highlightAxis if asked\n       * available only for TranslationGroup and RotationGroup\n       * (except RotationEye - plane of rotation is obvious)\n       */\n      if (\n        controls.highlightAxis &&\n        (this.activeHandle instanceof TranslationGroup ||\n          this.activeHandle instanceof RotationGroup) &&\n        !(this.activeHandle instanceof RotationEye)\n      ) {\n        this.activeHandle.getWorldPosition(this.highlightAxisLine.position);\n        const direction = this.highlightAxisLine.position.clone();\n        if (this.activeHandle instanceof TranslationGroup) {\n          direction.add(this.activeHandle.parallel);\n        } else {\n          direction.add(this.activeHandle.up);\n        }\n        this.highlightAxisLine.lookAt(direction);\n        scene.add(this.highlightAxisLine);\n      }\n\n      // switch event listeners and dispatch DRAG_START\n      removeEventListener(\n        this.domElement,\n        [\"pointerdown\", \"touchstart\"],\n        this.pointerDownListener,\n        {\n          capture: true\n        }\n      );\n      emitter.emit(EVENTS.DRAG_START, {\n        point: initialIntersectionPoint,\n        handle: this.activeHandle\n      });\n      addEventListener(this.domElement, [\"pointermove\", \"touchmove\"], this.pointerMoveListener, {\n        passive: false,\n        capture: true\n      });\n    } else {\n      this.activePlane = null;\n    }\n  };\n\n  private getEyePlaneNormal = (object: Object3D) => {\n    this.cameraPosition.copy(this.camera.position);\n    return this.cameraPosition.sub(object.position);\n  };\n\n  private setRayDirection = (clientX: number, clientY: number) => {\n    const rect = this.domElement.getBoundingClientRect();\n    const { clientHeight, clientWidth } = this.domElement;\n    this.mouse.x = ((clientX - rect.left) / clientWidth) * 2 - 1;\n    this.mouse.y = -((clientY - rect.top) / clientHeight) * 2 + 1;\n    this.setFromCamera(this.mouse, this.camera);\n  };\n\n  private pointerMoveListener = (event: MouseEvent | TouchEvent) => {\n    if (this.activeHandle === null || this.activePlane === null) {\n      return;\n    }\n    const point = getPointFromEvent(event);\n    if (!point) {\n      return;\n    }\n    const { clientX, clientY } = point;\n\n    this.setRayDirection(clientX, clientY);\n    this.ray.intersectPlane(this.activePlane, this.point);\n\n    this.currentScreenPoint.set(clientX, clientY);\n    const distance = this.currentScreenPoint.distanceTo(this.previousScreenPoint);\n    const dragRatio = distance / (this.clientDiagonalLength || 1);\n\n    emitter.emit(EVENTS.DRAG, {\n      point: this.point,\n      handle: this.activeHandle,\n      dragRatio\n    });\n\n    this.previousScreenPoint.set(clientX, clientY);\n  };\n\n  private pointerUpListener = () => {\n    removeEventListener(this.domElement, [\"pointermove\", \"touchmove\"], this.pointerMoveListener, {\n      capture: true\n    });\n    addEventListener(this.domElement, [\"pointerdown\", \"touchstart\"], this.pointerDownListener, {\n      passive: false,\n      capture: true\n    });\n    emitter.emit(EVENTS.DRAG_STOP, { point: this.point, handle: this.activeHandle });\n\n    if (\n      this.activeHandle?.parent &&\n      (this.activeHandle.parent as Controls).hideOtherControlsInstancesOnDrag\n    ) {\n      this.visibleControls.forEach(controls => {\n        controls.visible = true;\n      });\n      this.visibleControls = [];\n    }\n\n    if (\n      this.activeHandle?.parent &&\n      (this.activeHandle.parent as Controls).hideOtherHandlesOnDrag\n    ) {\n      this.visibleHandles.forEach(handle => {\n        handle.visible = true;\n      });\n      this.visibleHandles = [];\n    }\n\n    if (this.activeHandle instanceof PickPlane) {\n      this.setPickPlaneOpacity(PICK_PLANE_OPACITY.INACTIVE);\n    }\n\n    const scene = this.activeHandle?.parent?.parent;\n    if (scene) {\n      if (this.helperPlane) {\n        scene.remove(this.helperPlane);\n      }\n      scene.remove(this.highlightAxisLine);\n    }\n    this.activeHandle = null;\n    this.activePlane = null;\n  };\n\n  private setPickPlaneOpacity(opacity: number) {\n    if (!(this.activeHandle instanceof PickPlane)) {\n      return;\n    }\n    const material = this.activeHandle.plane.material;\n    if (Array.isArray(material)) {\n      material.map(m => {\n        m.opacity = opacity;\n        m.needsUpdate = true;\n      });\n    } else {\n      material.opacity = opacity;\n      material.needsUpdate = true;\n    }\n  }\n\n  private resolveHandleGroup = (intersectedObject: Intersection | undefined) => {\n    if (intersectedObject === undefined) {\n      return null;\n    }\n\n    return intersectedObject.object.parent as IHandle;\n  };\n\n  public destroy = () => {\n    this.activePlane = null;\n    this.activeHandle = null;\n    removeEventListener(this.domElement, [\"pointerdown\", \"touchstart\"], this.pointerDownListener, {\n      capture: true\n    });\n    removeEventListener(this.domElement, [\"pointermove\", \"touchmove\"], this.pointerMoveListener, {\n      capture: true\n    });\n    removeEventListener(this.domElement, [\"pointerup\", \"touchend\"], this.pointerUpListener, {\n      capture: true\n    });\n  };\n}\n","import { emitter } from \"./emmiter\";\nimport Controls from \"../controls\";\nimport PickPlane from \"../controls/handles/pick-plane\";\nimport { PICK_PLANE_OPACITY } from \"./constants\";\nimport { IHandle, PickGroup, RotationGroup, TranslationGroup } from \"../controls/handles\";\nimport RotationEye from \"../controls/handles/rotation-eye\";\nimport { addEventListener, removeEventListener } from \"./helper\";\nimport Line from \"../primitives/line\";\nimport {\n  BufferGeometry,\n  Float32BufferAttribute,\n  Intersection,\n  Object3D,\n  Plane,\n  PlaneHelper,\n  Quaternion,\n  Scene,\n  Vector3,\n  Raycaster as ThreeRaycaster, WebXRController, Matrix4\n} from \"three\";\n\nexport enum EVENTS {\n  DRAG_START = \"DRAG_START\",\n  DRAG = \"DRAG\",\n  DRAG_STOP = \"DRAG_STOP\"\n}\n\nconst tempMatrix = new Matrix4();\n\n/**\n * @hidden\n * The Raycaster listens on the mouse and touch events globally and\n * dispatches DRAG_START, DRAG, and DRAG_STOP events.\n */\nexport default class XRRaycaster extends ThreeRaycaster {\n  private activeHandle: IHandle | null = null;\n  private activePlane: Plane | null = null;\n  private point = new Vector3();\n  private normal = new Vector3();\n  private visibleHandles: Object3D[] = [];\n  private visibleControls: Object3D[] = [];\n  private helperPlane: PlaneHelper | null = null;\n  private controlsWorldQuaternion = new Quaternion();\n  private clientDiagonalLength = 1;\n  private readonly highlightAxisLine: Line;\n\n  constructor(\n    private xrControllers: WebXRController[],\n    private controls: { [id: string]: Controls }\n  ) {\n    super();\n    this.highlightAxisLine = this.createAxisLine();\n    this.xrControllers = xrControllers;\n\n    this.xrControllers.forEach(controller => {\n      addEventListener(controller, [\"selectstart\"], this.selectStartListener);\n      addEventListener(controller, [\"selectend\"], this.selectEndListener);\n    })\n  }\n\n  private createAxisLine = () => {\n    const geometry = new BufferGeometry();\n    geometry.setAttribute('position', new Float32BufferAttribute([\n      0, 0, -100,\n      0, 0, 100\n    ], 3));\n    return new Line(\"white\", geometry);\n  };\n\n  private selectStartListener = (event: any) => {\n    const controller = event.target;\n\n    tempMatrix.identity().extractRotation( controller.matrixWorld );\n\n    this.ray.origin.setFromMatrixPosition( controller.matrixWorld );\n    this.ray.direction.set( 0, 0, - 1 ).applyMatrix4( tempMatrix );\n\n    controller.userData.dragging = true;\n    controller.userData.previousPosition = new Vector3().copy(controller.position);\n    controller.userData.previousQuaternion = new Quaternion().copy(controller.quaternion);\n\n    const interactiveObjects: Object3D[] = [];\n    Object.values(this.controls).map(controls => {\n      interactiveObjects.push(...controls.getInteractiveObjects());\n    });\n    this.activeHandle = this.resolveHandleGroup(this.intersectObjects(interactiveObjects, true)[0]);\n\n    if (this.activeHandle?.parent) {\n      const controls = this.activeHandle.parent as Controls;\n\n      // hiding other controls and handles instances if asked\n      if (controls.hideOtherControlsInstancesOnDrag) {\n        Object.values(this.controls).forEach(x => {\n          if (x.visible) {\n            this.visibleControls.push(x);\n          }\n          x.visible = false;\n        });\n        controls.visible = true;\n      }\n\n      if (controls.hideOtherHandlesOnDrag) {\n        controls.children.map(handle => {\n          if (handle.visible) {\n            this.visibleHandles.push(handle);\n          }\n          handle.visible = false;\n        });\n        this.activeHandle.visible = true;\n      }\n\n      if (this.activeHandle instanceof PickPlane) {\n        this.setPickPlaneOpacity(PICK_PLANE_OPACITY.ACTIVE);\n      }\n\n      /**\n       * creating the activePlane - the plane on which intersection actions\n       * take place. mouse movements are translated to points on the activePlane\n       */\n      this.activePlane = new Plane();\n      controls.getWorldQuaternion(this.controlsWorldQuaternion);\n      this.normal.copy(\n        this.activeHandle.up\n      );\n      if (!(this.activeHandle instanceof RotationEye || this.activeHandle instanceof PickGroup)) {\n        this.normal.applyQuaternion(this.controlsWorldQuaternion);\n      }\n      if (this.activeHandle instanceof TranslationGroup) {\n        this.activePlane.setFromNormalAndCoplanarPoint(this.normal, this.activeHandle.position);\n      } else {\n        this.activePlane.setFromNormalAndCoplanarPoint(this.normal, controls.position);\n      }\n\n      // find initial intersection\n      const initialIntersectionPoint = new Vector3();\n      if (this.activeHandle instanceof PickGroup) {\n        this.activeHandle.getWorldPosition(initialIntersectionPoint);\n      } else {\n        this.ray.intersectPlane(this.activePlane, initialIntersectionPoint);\n      }\n\n      // activate the helper plane if asked\n      // available only for TranslationGroup and RotationGroup\n      // (except RotationEye - plane of rotation is obvious)\n      const scene = controls.parent as Scene;\n      if (\n        controls.showHelperPlane &&\n        (this.activeHandle instanceof TranslationGroup ||\n          this.activeHandle instanceof RotationGroup) &&\n        !(this.activeHandle instanceof RotationEye)\n      ) {\n        this.helperPlane = new PlaneHelper(this.activePlane, 1);\n        scene.add(this.helperPlane);\n      }\n\n      /**\n       * activate the highlightAxis if asked\n       * available only for TranslationGroup and RotationGroup\n       * (except RotationEye - plane of rotation is obvious)\n       */\n      if (\n        controls.highlightAxis &&\n        (this.activeHandle instanceof TranslationGroup ||\n          this.activeHandle instanceof RotationGroup) &&\n        !(this.activeHandle instanceof RotationEye)\n      ) {\n        this.activeHandle.getWorldPosition(this.highlightAxisLine.position);\n        const direction = this.highlightAxisLine.position.clone();\n        if (this.activeHandle instanceof TranslationGroup) {\n          direction.add(this.activeHandle.parallel);\n        } else {\n          direction.add(this.activeHandle.up);\n        }\n        this.highlightAxisLine.lookAt(direction);\n        scene.add(this.highlightAxisLine);\n      }\n\n      emitter.emit(EVENTS.DRAG_START, {\n        point: initialIntersectionPoint,\n        handle: this.activeHandle\n      });\n      controller.userData.intersectionPoint = initialIntersectionPoint;\n    } else {\n      this.activePlane = null;\n    }\n  };\n\n  private selectMoveListener = (controller: any) => {\n    if (this.activeHandle === null || this.activePlane === null) {\n      return;\n    }\n\n    tempMatrix.identity().extractRotation(controller.matrixWorld);\n\n    this.ray.origin.setFromMatrixPosition(controller.matrixWorld);\n    this.ray.direction.set( 0, 0, - 1 ).applyMatrix4( tempMatrix );\n\n    this.ray.intersectPlane(this.activePlane, this.point);\n    const distance = controller.userData.intersectionPoint.distanceTo(this.point);\n    const dragRatio = distance / (this.clientDiagonalLength || 1);\n\n    emitter.emit(EVENTS.DRAG, {\n      point: this.point,\n      handle: this.activeHandle,\n      dragRatio\n    });\n\n    controller.userData.previousPosition.copy(controller.position);\n    controller.userData.previousQuaternion.copy(controller.quaternion);\n    controller.userData.intersectionPoint.copy(this.point);\n  };\n\n  private selectEndListener = (event: any) => {\n    const controller = event.target;\n    controller.userData.dragging = false;\n\n    emitter.emit(EVENTS.DRAG_STOP, { point: this.point, handle: this.activeHandle });\n\n    if (\n      this.activeHandle?.parent &&\n      (this.activeHandle.parent as Controls).hideOtherControlsInstancesOnDrag\n    ) {\n      this.visibleControls.forEach(controls => {\n        controls.visible = true;\n      });\n      this.visibleControls = [];\n    }\n\n    if (\n      this.activeHandle?.parent &&\n      (this.activeHandle.parent as Controls).hideOtherHandlesOnDrag\n    ) {\n      this.visibleHandles.forEach(handle => {\n        handle.visible = true;\n      });\n      this.visibleHandles = [];\n    }\n\n    if (this.activeHandle instanceof PickPlane) {\n      this.setPickPlaneOpacity(PICK_PLANE_OPACITY.INACTIVE);\n    }\n\n    const scene = this.activeHandle?.parent?.parent;\n    if (scene) {\n      if (this.helperPlane) {\n        scene.remove(this.helperPlane);\n      }\n      scene.remove(this.highlightAxisLine);\n    }\n    this.activeHandle = null;\n    this.activePlane = null;\n  };\n\n  private setPickPlaneOpacity(opacity: number) {\n    if (!(this.activeHandle instanceof PickPlane)) {\n      return;\n    }\n    const material = this.activeHandle.plane.material;\n    if (Array.isArray(material)) {\n      material.map(m => {\n        m.opacity = opacity;\n        m.needsUpdate = true;\n      });\n    } else {\n      material.opacity = opacity;\n      material.needsUpdate = true;\n    }\n  }\n\n  private resolveHandleGroup = (intersectedObject: Intersection | undefined) => {\n    if (intersectedObject === undefined) {\n      return null;\n    }\n\n    return intersectedObject.object.parent as IHandle;\n  };\n\n  public update = () => {\n    this.xrControllers.forEach((controller: any) => {\n      if(controller.userData.dragging) {\n        this.selectMoveListener(controller);\n      }\n    })\n  }\n\n  public destroy = () => {\n    this.activePlane = null;\n    this.activeHandle = null;\n    this.xrControllers.forEach(xrController => {\n      removeEventListener(xrController, [\"selectstart\"], this.selectStartListener);\n      removeEventListener(xrController, [\"selectend\"], this.selectEndListener);\n    })\n  };\n}\n","import Controls, { IControlsOptions } from \"./controls\";\nimport Raycaster, { EVENTS } from \"./utils/raycaster\";\nimport { emitter, unbindAll } from \"./utils/emmiter\";\nimport { DEFAULT_HANDLE_GROUP_NAME } from \"./controls/handles\";\nimport {Camera, Mesh, Object3D, WebXRController} from \"three\";\nimport XRRaycaster from \"./utils/xr-raycaster\";\n\n/**\n * The ControlsManager provides helper functions to create Controls instances\n * and link them up with a Raycaster instance (reused across multiple Controls\n * instances).\n * @noInheritDoc\n */\nexport default class ControlsManager extends Object3D {\n  private objects: { [id: number]: Object3D } = {};\n  private controls: { [id: number]: Controls } = {};\n  private eventListeners: {\n    [event in EVENTS]: Array<\n      (object: Object3D | null, handleName: DEFAULT_HANDLE_GROUP_NAME | string) => void\n    >;\n  } = {\n    [EVENTS.DRAG_START]: [],\n    [EVENTS.DRAG]: [],\n    [EVENTS.DRAG_STOP]: []\n  };\n  private rayCaster: Raycaster;\n  private xrRaycaster: XRRaycaster | null = null;\n\n  /**\n   * @param camera - the THREE.Camera instance used in the scene\n   * @param domElement - the dom element on which THREE.js renderer is attached,\n   * @param xrControllers - WebXR Controllers to attach events to,\n   * generally available as `renderer.domElement`\n   */\n  constructor(private camera: Camera, private domElement: HTMLElement, private xrControllers: WebXRController[] = []) {\n    super();\n    this.rayCaster = new Raycaster(this.camera, this.domElement, this.controls);\n    if(xrControllers.length) {\n      this.xrRaycaster = new XRRaycaster(xrControllers, this.controls)\n    }\n    this.listenToEvents();\n  }\n\n  private listenToEvents = () => {\n    emitter.on(EVENTS.DRAG_START, ({ point, handle }) => {\n      if (handle === null) {\n        return;\n      }\n      const controls = handle.parent as Controls | null;\n      if (controls === null) {\n        return;\n      }\n      controls.processDragStart({ point, handle });\n      this.eventListeners[EVENTS.DRAG_START].map(callback => {\n        callback(controls.object, handle.name);\n      });\n    });\n\n    emitter.on(EVENTS.DRAG, ({ point, handle, dragRatio }) => {\n      if (handle === null) {\n        return;\n      }\n      const controls = handle.parent as Controls | null;\n      if (controls === null) {\n        return;\n      }\n      controls.processDrag({ point, handle, dragRatio });\n      this.eventListeners[EVENTS.DRAG].map(callback => {\n        callback(controls.object, handle.name);\n      });\n    });\n\n    emitter.on(EVENTS.DRAG_STOP, ({ handle }) => {\n      if (handle === null) {\n        return;\n      }\n      const controls = handle.parent as Controls | null;\n      if (controls === null) {\n        return;\n      }\n      controls.processDragEnd({ handle });\n      this.eventListeners[EVENTS.DRAG_STOP].map(callback => {\n        callback(controls.object, handle.name);\n      });\n    });\n  };\n\n  /**\n   * Creates a Controls instance and attaches it to the provided THREE.js object\n   *\n   * @param object - the object provided by the user\n   * @param options\n   */\n  public anchor = (object: Object3D, options?: IControlsOptions) => {\n    const controls = this.addControls(object, options);\n    this.objects[object.id] = object;\n    return controls;\n  };\n\n  /**\n   * Function to handle movements on WebXR controllers. Since unlike mouse and touch events, there's no move event for webxr controllers\n   *\n   */\n  public update = () => {\n    if(this.xrRaycaster) {\n      this.xrRaycaster.update();\n    }\n  };\n\n  /**\n   * Detaches the Controls instance from the provided THREE.js object\n   *\n   * @param object - the object provided by the user\n   * @param controls - the controls instance anchored on the object\n   */\n  public detach = (object: Object3D, controls: Controls) => {\n    if (!Object.prototype.hasOwnProperty.call(this.objects, object.id)) {\n      throw new Error(\"object should be attached first\");\n    }\n    this.remove(controls);\n    this.dispose(controls);\n\n    delete this.objects[object.id];\n    delete this.controls[controls.id];\n  };\n\n  private addControls = (object: Object3D, options?: IControlsOptions) => {\n    const controls = new Controls(object, this.camera, options);\n    this.controls[controls.id] = controls;\n    this.add(controls);\n    return controls;\n  };\n\n  /**\n   * Adds an event listener. Note that there is another method `addEventListener`\n   * on THREE.Object3D from which this class extends but that is specific to the\n   * internals of THREE.js, but not this library\n   * @param event\n   * @param callback - by default the second argument is the default group name\n   * for the Handle involved; for a custom handle, it is the `name` property\n   * set on the handle\n   */\n  public listen = (\n    event: EVENTS,\n    callback: (\n      object: Object3D | null,\n      handleName: DEFAULT_HANDLE_GROUP_NAME | string\n    ) => void\n  ): void => {\n    this.eventListeners[event].push(callback);\n  };\n\n  /**\n   * Removes the event listener.\n   * @param event\n   * @param callback\n   */\n  public removeListen = (\n    event: EVENTS,\n    callback: (\n      object: Object3D | null,\n      handleName: DEFAULT_HANDLE_GROUP_NAME | string\n    ) => void\n  ): void => {\n    const index = this.eventListeners[event].findIndex(x => x === callback);\n    if (index !== -1) {\n      this.eventListeners[event].splice(index, 1);\n    }\n  };\n\n  private dispose = (object: Object3D) => {\n    if (object instanceof Mesh) {\n      object.geometry.dispose();\n      if (Array.isArray(object.material)) {\n        object.material.map(material => material.dispose());\n      } else {\n        object.material.dispose();\n      }\n    }\n    while (object.children.length > 0) {\n      object.children.map(child => {\n        this.dispose(child);\n        object.remove(child);\n      });\n    }\n  };\n\n  /**\n   * Destroys all Controls instances and removes all event listeners\n   */\n  public destroy = () => {\n    unbindAll();\n\n    const scene = this.parent;\n    if (scene !== null) {\n      scene.remove(this);\n    }\n    this.dispose(this);\n    Object.values(this.controls).map(control => {\n      this.dispose(control);\n    });\n\n    this.rayCaster.destroy();\n    this.objects = {};\n    this.controls = {};\n    this.eventListeners = {\n      [EVENTS.DRAG_START]: [],\n      [EVENTS.DRAG]: [],\n      [EVENTS.DRAG_STOP]: []\n    };\n  };\n}\n"],"names":["PICK_PLANE_OPACITY","Cone","Mesh","constructor","color","super","this","geometry","ConeGeometry","material","MeshBasicMaterial","depthTest","transparent","opacity","Line","LineLoop","DEFAULT_HANDLE_GROUP_NAME","ANCHOR_MODE","HandleGroup","Group","TranslationGroup","Vector3","RotationGroup","PickGroup","PickPlaneGroup","Translation","cone","coneMaterial","lineMaterial","line","set","lineGeometry","BufferGeometry","setAttribute","Float32BufferAttribute","scale","translateY","add","Octahedron","OctahedronBufferGeometry","side","DoubleSide","Rotation","ringRadius","handlebar","ringMaterial","ring","handlebarMaterial","ringGeometry","angle","Math","PI","vertices","i","ringNumberOfPoints","push","cos","sin","position","y","Pick","octahedron","Plane","width","height","PlaneGeometry","INACTIVE","PickPlane","plane","planeMaterial","boundaryMaterial","boundary","boundaryGeometry","crossXGeometry","crossYGeometry","vertexMaxX","vertexMaxY","crossX","crossY","RotationEye","radius","Quaternion","updateMatrixWorld","force","camera","parent","matrixWorld","decompose","_temp1","controlsWorldOrientation","_temp2","worldPosition","_temp3","getWorldQuaternion","quaternion","premultiply","invert","getWorldPosition","up","sub","Controls","object","options","Set","pickPlaneXY","name","PICK_PLANE_XY","pickPlaneYZ","PICK_PLANE_YZ","pickPlaneZX","PICK_PLANE_ZX","rotateY","rotateX","setupHandle","handle","handles","pick","PICK","rotationEye","ER","translationXP","XPT","translationYP","YPT","translationZP","ZPT","translationXN","XNT","translationYN","YNT","translationZN","ZNT","translateX","boundingSphereRadius","translationDistanceScale","translateZ","rotateZ","parallel","rotationX","XR","rotationY","YR","rotationZ","ZR","useComputedBounds","type","computeBoundingSphere","boundingSphere","separation","console","warn","limit","translationLimit","translationAnchor","clone","args","point","dragStartPoint","copy","dragIncrementalStartPoint","isBeingDraggedTranslation","isBeingDraggedRotation","x","xSnap","ySnap","z","zSnap","snapTranslation","snap","xyz","toArray","floor","map","ceil","snapFloor","p","index","fromArray","dampingFactor","MathUtils","clamp","dragRatio","k","exp","abs","deltaPosition","normalizedHandleParallelVectorCache","normalize","applyQuaternion","delta","dot","multiplyScalar","isDampingEnabled","getLimitedTranslation","touch1","objectWorldPosition","touch2","handleTargetQuaternion","setFromUnitVectors","mode","FIXED","detachHandleUpdateQuaternionAttach","objectTargetQuaternion","translation","xLimit","yLimit","zLimit","xAnchor","yAnchor","zAnchor","minTranslationCache","maxTranslationCache","scene","Error","attach","objectTargetPosition","handleNames","visibility","handleNamesMap","forEach","handleName","undefined","visible","objectParentWorldPosition","objectParentWorldQuaternion","objectParentWorldScale","detachObjectUpdatePositionAttach","INHERIT","initialSelfQuaternion","hideOtherHandlesOnDrag","hideOtherControlsInstancesOnDrag","showHelperPlane","highlightAxis","rotationRadiusScale","eyeRotationRadiusScale","pickPlaneSizeScale","orientation","w","computeObjectBounds","setupDefaultTranslation","setupDefaultRotation","setupDefaultEyeRotation","setupDefaultPickPlane","setupDefaultPick","getInteractiveObjects","interactiveObjects","module","events","prototype","emit","event","slice","call","arguments","filter","apply","on","cb","bind","emitter","NanoEvents","getPointFromEvent","clientX","clientY","MouseEvent","TouchEvent","touches","length","addEventListener","element","eventNames","callback","removeEventListener","EVENTS","Raycaster","ThreeRaycaster","domElement","controls","Vector2","setRayDirection","clientDiagonalLength","sqrt","target","clientWidth","clientHeight","previousScreenPoint","Object","values","activeHandle","resolveHandleGroup","intersectObjects","visibleControls","children","visibleHandles","setPickPlaneOpacity","ACTIVE","activePlane","eyePlaneNormal","getEyePlaneNormal","controlsWorldQuaternion","normal","isActivePlaneFlipped","applyAxisAngle","setFromNormalAndCoplanarPoint","initialIntersectionPoint","ray","intersectPlane","helperPlane","PlaneHelper","highlightAxisLine","direction","lookAt","pointerDownListener","capture","DRAG_START","pointerMoveListener","passive","cameraPosition","rect","getBoundingClientRect","mouse","left","top","setFromCamera","currentScreenPoint","distanceTo","DRAG","DRAG_STOP","remove","intersectedObject","pointerUpListener","createAxisLine","Array","isArray","m","needsUpdate","tempMatrix","Matrix4","XRRaycaster","xrControllers","controller","identity","extractRotation","origin","setFromMatrixPosition","applyMatrix4","userData","dragging","previousPosition","previousQuaternion","intersectionPoint","selectMoveListener","xrController","selectStartListener","selectEndListener","ControlsManager","Object3D","processDragStart","eventListeners","processDrag","processDragEnd","addControls","objects","id","xrRaycaster","update","hasOwnProperty","dispose","findIndex","splice","child","unbindAllEvents","control","rayCaster","destroy","listenToEvents"],"mappings":"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"}